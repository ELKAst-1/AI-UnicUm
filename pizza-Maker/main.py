import streamlit as st
import pandas as pd
import qrcode
import os
import configparser
from datetime import datetime
from PIL import Image
import io
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
import matplotlib.pyplot as plt
import matplotlib

matplotlib.use('Agg')

st.set_page_config(
    page_title="Pizza Maker üçï",
    page_icon="üçï",
    layout="wide"
)


class ConfigManager:
    @staticmethod
    def load_receipt_config():
        config = configparser.ConfigParser()
        config.read('config/receipt_config.txt', encoding='utf-8')
        return config

    @staticmethod
    def load_menu_config(menu_file):
        menu = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
        config = configparser.ConfigParser()
        config.read(f'config/{menu_file}', encoding='utf-8')

        if '–ü–∏—Ü—Ü—ã' in config:
            for pizza, value in config['–ü–∏—Ü—Ü—ã'].items():
                price, size, ingredients = value.split('|')
                menu["–ü–∏—Ü—Ü—ã"][pizza.replace('_', ' ')] = {
                    "—Ü–µ–Ω–∞": int(price),
                    "—Ä–∞–∑–º–µ—Ä": size,
                    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": ingredients
                }

        if '–ù–∞–ø–∏—Ç–∫–∏' in config:
            for drink, value in config['–ù–∞–ø–∏—Ç–∫–∏'].items():
                price, volume = value.split('|')
                menu["–ù–∞–ø–∏—Ç–∫–∏"][drink] = {"—Ü–µ–Ω–∞": int(price), "–æ–±—ä–µ–º": volume}

        return menu

    @staticmethod
    def load_toppings():
        toppings = {}
        with open('config/toppings.txt', 'r', encoding='utf-8') as f:
            for line in f:
                if '=' in line:
                    topping, price = line.strip().split('=')
                    toppings[topping] = int(price)
        return toppings

    @staticmethod
    def load_discounts():
        discounts = {}
        config = configparser.ConfigParser()
        config.read('config/discounts.txt', encoding='utf-8')

        for section in config.sections():
            discounts[section] = {
                '–Ω–∞–∑–≤–∞–Ω–∏–µ': config[section].get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                '–ø—Ä–æ—Ü–µ–Ω—Ç': int(config[section].get('–ü—Ä–æ—Ü–µ–Ω—Ç', '0')),
                '—É—Å–ª–æ–≤–∏–µ': config[section].get('–£—Å–ª–æ–≤–∏–µ', ''),
                '–∞–∫—Ç–∏–≤–Ω–∞': config[section].getboolean('–ê–∫—Ç–∏–≤–Ω–∞', False)
            }
        return discounts

    @staticmethod
    def save_discounts(discounts):
        config = configparser.ConfigParser()
        for key, value in discounts.items():
            config[key] = {
                '–ù–∞–∑–≤–∞–Ω–∏–µ': value['–Ω–∞–∑–≤–∞–Ω–∏–µ'],
                '–ü—Ä–æ—Ü–µ–Ω—Ç': str(value['–ø—Ä–æ—Ü–µ–Ω—Ç']),
                '–£—Å–ª–æ–≤–∏–µ': value['—É—Å–ª–æ–≤–∏–µ'],
                '–ê–∫—Ç–∏–≤–Ω–∞': str(value['–∞–∫—Ç–∏–≤–Ω–∞'])
            }

        with open('config/discounts.txt', 'w', encoding='utf-8') as f:
            config.write(f)


class PriceCalculator:
    @staticmethod
    def calculate_price_with_discount(base_price, size, discounts):
        price = base_price
        discount_applied = 0

        for discount_data in discounts.values():
            if discount_data['–∞–∫—Ç–∏–≤–Ω–∞'] and discount_data['—É—Å–ª–æ–≤–∏–µ'] in size:
                discount_percent = discount_data['–ø—Ä–æ—Ü–µ–Ω—Ç']
                discount_amount = int(price * discount_percent / 100)
                price -= discount_amount
                discount_applied += discount_percent

        return price, discount_applied


def generate_qr_code(data):
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(data)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")

    buf = io.BytesIO()
    img.save(buf, format='PNG')
    buf.seek(0)
    return buf


def generate_receipt_pdf(order_data, receipt_config, qr_image_path):
    receipt_path = f"receipts/receipt_{order_data['ID']}.pdf"
    c = canvas.Canvas(receipt_path, pagesize=letter)
    width, height = letter

    y_position = height - 50

    c.setFont("Helvetica-Bold", 16)
    company_name = receipt_config['–ß–µ–∫'].get('–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏', 'Pizza Maker')
    c.drawString(50, y_position, company_name)
    y_position -= 30

    c.setFont("Helvetica", 10)
    c.drawString(50, y_position, f"–ò–ù–ù: {receipt_config['–ß–µ–∫'].get('–ò–ù–ù', '')}")
    y_position -= 15
    c.drawString(50, y_position, f"–ê–¥—Ä–µ—Å: {receipt_config['–ß–µ–∫'].get('–ê–¥—Ä–µ—Å', '')}")
    y_position -= 15
    c.drawString(50, y_position, f"–¢–µ–ª–µ—Ñ–æ–Ω: {receipt_config['–ß–µ–∫'].get('–¢–µ–ª–µ—Ñ–æ–Ω', '')}")
    y_position -= 15
    c.drawString(50, y_position, f"–°–∞–π—Ç: {receipt_config['–ß–µ–∫'].get('–°–∞–π—Ç', '')}")
    y_position -= 30

    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y_position, f"–ß–ï–ö #{order_data['ID']}")
    y_position -= 15
    c.setFont("Helvetica", 10)
    c.drawString(50, y_position, f"–î–∞—Ç–∞: {order_data['–î–∞—Ç–∞']}")
    y_position -= 15
    c.drawString(50, y_position, f"–ö–ª–∏–µ–Ω—Ç: {order_data['–§–ò–û']}")
    y_position -= 30

    c.setFont("Helvetica-Bold", 11)
    c.drawString(50, y_position, "–ó–ê–ö–ê–ó:")
    y_position -= 20

    c.setFont("Helvetica", 10)
    for item in order_data['–ó–∞–∫–∞–∑'].split('\n'):
        if item.strip():
            c.drawString(70, y_position, item)
            y_position -= 15

    y_position -= 10

    if order_data.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') and order_data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'].strip():
        c.setFont("Helvetica-Bold", 11)
        c.drawString(50, y_position, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:")
        y_position -= 15
        c.setFont("Helvetica", 10)
        c.drawString(70, y_position, order_data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'])
        y_position -= 20

    c.setFont("Helvetica", 10)
    c.drawString(50, y_position, f"–°—É–º–º–∞: {order_data['–°—É–º–º–∞']} —Ä—É–±.")
    y_position -= 15

    if order_data.get('–°–∫–∏–¥–∫–∞', 0) > 0:
        c.drawString(50, y_position, f"–°–∫–∏–¥–∫–∞: {order_data['–°–∫–∏–¥–∫–∞']}%")
        y_position -= 15

    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y_position, f"–ò–¢–û–ì–û: {order_data['–ò—Ç–æ–≥–æ']} —Ä—É–±.")
    y_position -= 15

    c.setFont("Helvetica", 10)
    c.drawString(50, y_position, f"–û–ø–ª–∞—Ç–∞: {order_data['–û–ø–ª–∞—Ç–∞']}")
    y_position -= 15

    if order_data.get('–°–¥–∞—á–∞', 0) > 0:
        c.drawString(50, y_position, f"–°–¥–∞—á–∞: {order_data['–°–¥–∞—á–∞']} —Ä—É–±.")
        y_position -= 15

    y_position -= 20
    c.drawString(50, y_position, f"–ù–î–°: {receipt_config['–ß–µ–∫'].get('–ù–î–°', '20%')}")
    y_position -= 40

    if os.path.exists(qr_image_path):
        c.drawImage(qr_image_path, 50, y_position - 100, width=100, height=100)

    c.save()
    return receipt_path


def save_order_to_excel(order_data):
    df = pd.read_excel('orders.xlsx')
    new_row = pd.DataFrame([order_data])
    df = pd.concat([df, new_row], ignore_index=True)
    df.to_excel('orders.xlsx', index=False)


def show_analytics():
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    tab1, tab2 = st.tabs(["üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –°–∫–∏–¥–æ–∫"])

    with tab1:
        st.subheader("–ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤")

        try:
            df = pd.read_excel('orders.xlsx')

            if len(df) == 0:
                st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!")
                return

            col1, col2 = st.columns(2)

            with col1:
                st.markdown("### üçï –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã")

                all_items = []
                for order in df['–ó–∞–∫–∞–∑']:
                    items = str(order).split('\n')
                    for item in items:
                        if item.strip() and '-' in item:
                            item_name = item.split('-')[0].strip()
                            item_name = item_name.split('‚Ä¢')[-1].strip()
                            all_items.append(item_name)

                if all_items:
                    item_counts = pd.Series(all_items).value_counts().head(10)

                    fig, ax = plt.subplots(figsize=(10, 6))
                    colors = plt.cm.Set3(range(len(item_counts)))
                    bars = ax.bar(range(len(item_counts)), item_counts.values, color=colors)
                    ax.set_xlabel('–¢–æ–≤–∞—Ä—ã', fontsize=12)
                    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', fontsize=12)
                    ax.set_title('–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', fontsize=14, fontweight='bold')
                    ax.set_xticks(range(len(item_counts)))
                    ax.set_xticklabels(item_counts.index, rotation=45, ha='right')
                    ax.grid(axis='y', alpha=0.3)

                    for bar in bars:
                        height = bar.get_height()
                        ax.text(bar.get_x() + bar.get_width() / 2., height,
                                f'{int(height)}',
                                ha='center', va='bottom', fontsize=10)

                    plt.tight_layout()
                    st.pyplot(fig)
                    plt.close()

                    st.markdown("#### üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                    st.write(f"- –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(item_counts)}")
                    st.write(f"- –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π: {item_counts.index[0]} ({item_counts.values[0]} –∑–∞–∫–∞–∑–æ–≤)")
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö")

            with col2:
                st.markdown("### üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")

                age_bins = [0, 12, 17, 25, 35, 50, 100]
                age_labels = ['0-12', '13-17', '18-25', '26-35', '36-50', '50+']
                df['–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞'] = pd.cut(df['–í–æ–∑—Ä–∞—Å—Ç'], bins=age_bins, labels=age_labels)

                age_counts = df['–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞'].value_counts().sort_index()

                fig, ax = plt.subplots(figsize=(10, 6))
                colors = plt.cm.Pastel1(range(len(age_counts)))
                bars = ax.bar(range(len(age_counts)), age_counts.values, color=colors)
                ax.set_xlabel('–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã', fontsize=12)
                ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤', fontsize=12)
                ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É', fontsize=14, fontweight='bold')
                ax.set_xticks(range(len(age_counts)))
                ax.set_xticklabels(age_counts.index, rotation=0)
                ax.grid(axis='y', alpha=0.3)

                for bar in bars:
                    height = bar.get_height()
                    ax.text(bar.get_x() + bar.get_width() / 2., height,
                            f'{int(height)}',
                            ha='center', va='bottom', fontsize=10)

                plt.tight_layout()
                st.pyplot(fig)
                plt.close()

                st.markdown("#### üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                st.write(f"- –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {df['–í–æ–∑—Ä–∞—Å—Ç'].mean():.1f} –ª–µ—Ç")
                st.write(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {df['–í–æ–∑—Ä–∞—Å—Ç'].min()} –ª–µ—Ç")
                st.write(f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {df['–í–æ–∑—Ä–∞—Å—Ç'].max()} –ª–µ—Ç")

            st.markdown("---")
            st.markdown("### üí∞ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂")

            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", len(df))
            with col2:
                st.metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{df['–ò—Ç–æ–≥–æ'].sum():.0f} ‚ÇΩ")
            with col3:
                st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{df['–ò—Ç–æ–≥–æ'].mean():.0f} ‚ÇΩ")
            with col4:
                total_discount = df[df['–°–∫–∏–¥–∫–∞'] > 0]['–°–∫–∏–¥–∫–∞'].count()
                st.metric("–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å–∫–∏–¥–æ–∫", total_discount)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    with tab2:
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏")

        discounts = ConfigManager.load_discounts()

        st.markdown("### –°–∫–∏–¥–∫–∞ 1")
        col1, col2 = st.columns(2)
        with col1:
            discount1_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ 1",
                                           value=discounts.get('–°–∫–∏–¥–∫–∞1', {}).get('–Ω–∞–∑–≤–∞–Ω–∏–µ', ''))
            discount1_percent = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ 1", 0, 50,
                                          discounts.get('–°–∫–∏–¥–∫–∞1', {}).get('–ø—Ä–æ—Ü–µ–Ω—Ç', 0))
        with col2:
            discount1_condition = st.selectbox("–£—Å–ª–æ–≤–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è 1",
                                               ["–ú–∞–ª–µ–Ω—å–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ë–æ–ª—å—à–∞—è"],
                                               index=["–ú–∞–ª–µ–Ω—å–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ë–æ–ª—å—à–∞—è"].index(
                                                   discounts.get('–°–∫–∏–¥–∫–∞1', {}).get('—É—Å–ª–æ–≤–∏–µ', '–ë–æ–ª—å—à–∞—è')))
            discount1_active = st.checkbox("–ê–∫—Ç–∏–≤–Ω–∞ —Å–∫–∏–¥–∫–∞ 1",
                                           value=discounts.get('–°–∫–∏–¥–∫–∞1', {}).get('–∞–∫—Ç–∏–≤–Ω–∞', False))

        st.markdown("---")
        st.markdown("### –°–∫–∏–¥–∫–∞ 2")
        col1, col2 = st.columns(2)
        with col1:
            discount2_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏ 2",
                                           value=discounts.get('–°–∫–∏–¥–∫–∞2', {}).get('–Ω–∞–∑–≤–∞–Ω–∏–µ', ''))
            discount2_percent = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ 2", 0, 50,
                                          discounts.get('–°–∫–∏–¥–∫–∞2', {}).get('–ø—Ä–æ—Ü–µ–Ω—Ç', 0))
        with col2:
            discount2_condition = st.selectbox("–£—Å–ª–æ–≤–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è 2",
                                               ["–ú–∞–ª–µ–Ω—å–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ë–æ–ª—å—à–∞—è"],
                                               index=["–ú–∞–ª–µ–Ω—å–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ë–æ–ª—å—à–∞—è"].index(
                                                   discounts.get('–°–∫–∏–¥–∫–∞2', {}).get('—É—Å–ª–æ–≤–∏–µ', '–ú–∞–ª–µ–Ω—å–∫–∞—è')))
            discount2_active = st.checkbox("–ê–∫—Ç–∏–≤–Ω–∞ —Å–∫–∏–¥–∫–∞ 2",
                                           value=discounts.get('–°–∫–∏–¥–∫–∞2', {}).get('–∞–∫—Ç–∏–≤–Ω–∞', False))

        st.markdown("---")

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∏–¥–æ–∫", type="primary"):
            new_discounts = {
                '–°–∫–∏–¥–∫–∞1': {
                    '–Ω–∞–∑–≤–∞–Ω–∏–µ': discount1_name,
                    '–ø—Ä–æ—Ü–µ–Ω—Ç': discount1_percent,
                    '—É—Å–ª–æ–≤–∏–µ': discount1_condition,
                    '–∞–∫—Ç–∏–≤–Ω–∞': discount1_active
                },
                '–°–∫–∏–¥–∫–∞2': {
                    '–Ω–∞–∑–≤–∞–Ω–∏–µ': discount2_name,
                    '–ø—Ä–æ—Ü–µ–Ω—Ç': discount2_percent,
                    '—É—Å–ª–æ–≤–∏–µ': discount2_condition,
                    '–∞–∫—Ç–∏–≤–Ω–∞': discount2_active
                }
            }
            ConfigManager.save_discounts(new_discounts)
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∏–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()


def show_main_page():
    st.title("üçï Pizza Maker")
    st.markdown("### –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–∫–∞–∑–∞ –ø–∏—Ü—Ü—ã!")

    col1, col2 = st.columns([2, 1])

    with col1:
        st.markdown("#### –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")

        fio = st.text_input("–§–ò–û", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
        age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=1, max_value=120, value=25)

        st.markdown("#### –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        comment = st.text_area("–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –±–µ–∑ –ª—É–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞ –∫ 18:00 –∏ —Ç.–¥.",
                               height=100)

        if st.button("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –º–µ–Ω—é", type="primary"):
            if not fio:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û")
            else:
                st.session_state['user_data'] = {
                    'fio': fio,
                    'age': age,
                    'comment': comment
                }
                st.session_state['page'] = 'menu'
                st.rerun()

    with col2:
        st.info("""
        **–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å:**

        1. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –≤–æ–∑—Ä–∞—Å—Ç
        2. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –∏ –Ω–∞–ø–∏—Ç–∫–∏
        4. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑
        5. –ü–æ–ª—É—á–∏—Ç–µ —á–µ–∫ —Å QR-–∫–æ–¥–æ–º

        **–°–∫–∏–¥–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!**
        """)


def show_menu_page():
    if 'user_data' not in st.session_state:
        st.session_state['page'] = 'main'
        st.rerun()
        return

    user_data = st.session_state['user_data']
    is_adult = user_data['age'] >= 18

    st.title(f"üçï –ú–µ–Ω—é –¥–ª—è {user_data['fio']}")

    if is_adult:
        st.success("‚ú® –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –≤–∑—Ä–æ—Å–ª–æ–µ –º–µ–Ω—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º!")
        menu = ConfigManager.load_menu_config('menu_adult.txt')
    else:
        st.info("üéà –î–µ—Ç—Å–∫–æ–µ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!")
        menu = ConfigManager.load_menu_config('menu_minor.txt')

    discounts = ConfigManager.load_discounts()

    active_discounts = [d for d in discounts.values() if d['–∞–∫—Ç–∏–≤–Ω–∞']]
    if active_discounts:
        st.markdown("### üéâ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏:")
        cols = st.columns(len(active_discounts))
        for i, discount in enumerate(active_discounts):
            with cols[i]:
                st.success(f"**{discount['–Ω–∞–∑–≤–∞–Ω–∏–µ']}**: {discount['–ø—Ä–æ—Ü–µ–Ω—Ç']}% –Ω–∞ {discount['—É—Å–ª–æ–≤–∏–µ']}")

    if 'cart' not in st.session_state:
        st.session_state['cart'] = []

    col1, col2 = st.columns([2, 1])

    with col1:
        tab1, tab2 = st.tabs(["üçï –ü–∏—Ü—Ü—ã", "ü•§ –ù–∞–ø–∏—Ç–∫–∏"])

        with tab1:
            st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É")

            for pizza_name, pizza_info in menu["–ü–∏—Ü—Ü—ã"].items():
                with st.expander(f"üçï {pizza_name}", expanded=False):
                    st.write(f"**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:** {pizza_info['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']}")

                    size = st.selectbox(
                        "–†–∞–∑–º–µ—Ä",
                        ["–ú–∞–ª–µ–Ω—å–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ë–æ–ª—å—à–∞—è"],
                        key=f"size_{pizza_name}"
                    )

                    base_price = pizza_info['—Ü–µ–Ω–∞']

                    if is_adult:
                        size_multipliers = {"–ú–∞–ª–µ–Ω—å–∫–∞—è": 0.7, "–°—Ä–µ–¥–Ω—è—è": 0.85, "–ë–æ–ª—å—à–∞—è": 1.0}
                    else:
                        size_multipliers = {"–ú–∞–ª–µ–Ω—å–∫–∞—è": 0.75, "–°—Ä–µ–¥–Ω—è—è": 1.0, "–ë–æ–ª—å—à–∞—è": 1.2}

                    price_before_discount = int(base_price * size_multipliers[size])
                    final_price, discount_percent = PriceCalculator.calculate_price_with_discount(
                        price_before_discount, size, discounts
                    )

                    if discount_percent > 0:
                        st.markdown(f"~~{price_before_discount} ‚ÇΩ~~ ‚Üí **{final_price} ‚ÇΩ** (—Å–∫–∏–¥–∫–∞ {discount_percent}%)")
                    else:
                        st.markdown(f"**–¶–µ–Ω–∞: {final_price} ‚ÇΩ**")

                    if st.button(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {pizza_name}", key=f"add_{pizza_name}"):
                        st.session_state['cart'].append({
                            'name': f"{pizza_name} ({size})",
                            'price': final_price,
                            'discount': discount_percent
                        })
                        st.success(f"‚úÖ {pizza_name} ({size}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
                        st.rerun()

        with tab2:
            st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫")

            for drink_name, drink_info in menu["–ù–∞–ø–∏—Ç–∫–∏"].items():
                with st.expander(f"ü•§ {drink_name}", expanded=False):
                    volume = st.selectbox(
                        "–û–±—ä–µ–º",
                        ["0.33–ª", "0.5–ª", "1–ª", "1.5–ª", "2–ª"],
                        key=f"volume_{drink_name}"
                    )

                    base_price = drink_info['—Ü–µ–Ω–∞']
                    volume_multipliers = {
                        "0.33–ª": 0.6,
                        "0.5–ª": 0.75,
                        "1–ª": 1.0,
                        "1.5–ª": 1.4,
                        "2–ª": 1.8
                    }

                    price_before_discount = int(base_price * volume_multipliers[volume])
                    final_price, discount_percent = PriceCalculator.calculate_price_with_discount(
                        price_before_discount, volume, discounts
                    )

                    if discount_percent > 0:
                        st.markdown(f"~~{price_before_discount} ‚ÇΩ~~ ‚Üí **{final_price} ‚ÇΩ** (—Å–∫–∏–¥–∫–∞ {discount_percent}%)")
                    else:
                        st.markdown(f"**–¶–µ–Ω–∞: {final_price} ‚ÇΩ**")

                    if st.button(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {drink_name}", key=f"add_{drink_name}"):
                        st.session_state['cart'].append({
                            'name': f"{drink_name} ({volume})",
                            'price': final_price,
                            'discount': discount_percent
                        })
                        st.success(f"‚úÖ {drink_name} ({volume}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
                        st.rerun()

    with col2:
        st.markdown("### üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞")

        if st.session_state['cart']:
            total = 0
            max_discount = 0

            for i, item in enumerate(st.session_state['cart']):
                st.write(f"{i + 1}. {item['name']} - {item['price']} ‚ÇΩ")
                total += item['price']
                if item['discount'] > max_discount:
                    max_discount = item['discount']

            st.markdown("---")
            st.markdown(f"**–ò—Ç–æ–≥–æ: {total} ‚ÇΩ**")

            if max_discount > 0:
                st.success(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞: {max_discount}%")

            payment_method = st.radio("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", ["–ö–∞—Ä—Ç–∞", "–ù–∞–ª–∏—á–Ω—ã–µ"])

            cash_amount = 0
            if payment_method == "–ù–∞–ª–∏—á–Ω—ã–µ":
                cash_amount = st.number_input("–°—É–º–º–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö", min_value=total, value=total)

            col_a, col_b = st.columns(2)
            with col_a:
                if st.button("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", type="primary"):
                    order_id = datetime.now().strftime("%Y%m%d%H%M%S")

                    order_items = '\n'.join([f"‚Ä¢ {item['name']} - {item['price']} —Ä—É–±."
                                             for item in st.session_state['cart']])

                    change = cash_amount - total if payment_method == "–ù–∞–ª–∏—á–Ω—ã–µ" else 0

                    qr_data = f"–ó–∞–∫–∞–∑ #{order_id}\n–ö–ª–∏–µ–Ω—Ç: {user_data['fio']}\n–°—É–º–º–∞: {total} —Ä—É–±."
                    if user_data['comment']:
                        qr_data += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data['comment']}"

                    qr_image = generate_qr_code(qr_data)
                    qr_path = f"receipts/qr_{order_id}.png"

                    os.makedirs('receipts', exist_ok=True)
                    with open(qr_path, 'wb') as f:
                        f.write(qr_image.getvalue())

                    order_data = {
                        'ID': order_id,
                        '–î–∞—Ç–∞': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        '–§–ò–û': user_data['fio'],
                        '–í–æ–∑—Ä–∞—Å—Ç': user_data['age'],
                        '–ó–∞–∫–∞–∑': order_items,
                        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': user_data['comment'],
                        '–°—É–º–º–∞': total,
                        '–°–∫–∏–¥–∫–∞': max_discount,
                        '–ò—Ç–æ–≥–æ': total,
                        '–û–ø–ª–∞—Ç–∞': payment_method,
                        '–°–¥–∞—á–∞': change
                    }

                    receipt_config = ConfigManager.load_receipt_config()
                    receipt_path = generate_receipt_pdf(order_data, receipt_config, qr_path)

                    save_order_to_excel(order_data)

                    st.success(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

                    with open(receipt_path, 'rb') as f:
                        st.download_button(
                            "üì• –°–∫–∞—á–∞—Ç—å —á–µ–∫",
                            f,
                            file_name=f"receipt_{order_id}.pdf",
                            mime="application/pdf"
                        )

                    st.session_state['cart'] = []
                    st.balloons()

            with col_b:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å"):
                    st.session_state['cart'] = []
                    st.rerun()
        else:
            st.info("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"):
            st.session_state['page'] = 'main'
            st.rerun()


def main():
    if 'page' not in st.session_state:
        st.session_state['page'] = 'main'

    st.sidebar.title("üçï –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
        ["üè† –ì–ª–∞–≤–Ω–∞—è", "üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"],
        index=0 if st.session_state['page'] == 'main' else 1
    )

    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        if st.session_state['page'] == 'menu':
            show_menu_page()
        else:
            show_main_page()
    else:
        show_analytics()


if __name__ == "__main__":
    main()
