import customtkinter as ctk
import pandas as pd
import qrcode
import os
import configparser
from datetime import datetime
from PIL import Image, ImageTk
import tkinter.messagebox as messagebox
from tkinter import simpledialog
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

ctk.set_appearance_mode("Dark")
ctk.set_default_color_theme("blue")


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""

    @staticmethod
    def load_receipt_config():
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–∞"""
        config = configparser.ConfigParser()
        config.read('config/receipt_config.txt', encoding='utf-8')
        return config

    @staticmethod
    def load_menu_config(menu_file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ —Ñ–∞–π–ª–∞"""
        menu = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
        config = configparser.ConfigParser()
        config.read(f'config/{menu_file}', encoding='utf-8')

        if '–ü–∏—Ü—Ü—ã' in config:
            for pizza, value in config['–ü–∏—Ü—Ü—ã'].items():
                price, size, ingredients = value.split('|')
                menu["–ü–∏—Ü—Ü—ã"][pizza.replace('_', ' ')] = {
                    "—Ü–µ–Ω–∞": int(price),
                    "—Ä–∞–∑–º–µ—Ä": size,
                    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": ingredients
                }

        if '–ù–∞–ø–∏—Ç–∫–∏' in config:
            for drink, value in config['–ù–∞–ø–∏—Ç–∫–∏'].items():
                price, volume = value.split('|')
                menu["–ù–∞–ø–∏—Ç–∫–∏"][drink] = {"—Ü–µ–Ω–∞": int(price), "–æ–±—ä–µ–º": volume}

        return menu

    @staticmethod
    def load_toppings():
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∏–Ω–æ–∫"""
        toppings = {}
        with open('config/toppings.txt', 'r', encoding='utf-8') as f:
            for line in f:
                if '=' in line:
                    topping, price = line.strip().split('=')
                    toppings[topping] = int(price)
        return toppings

    @staticmethod
    def save_receipt_config(config_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–∞"""
        config = configparser.ConfigParser()
        config['–ß–µ–∫'] = config_data['receipt']
        config['QR'] = config_data['qr']

        with open('config/receipt_config.txt', 'w', encoding='utf-8') as f:
            config.write(f)

    @staticmethod
    def save_menu_config(menu_data, menu_file):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é –≤ —Ñ–∞–π–ª"""
        config = configparser.ConfigParser()

        # –ü–∏—Ü—Ü—ã
        config['–ü–∏—Ü—Ü—ã'] = {}
        for pizza, info in menu_data["–ü–∏—Ü—Ü—ã"].items():
            config['–ü–∏—Ü—Ü—ã'][pizza.replace(
                ' ', '_'
            )] = f"{info['—Ü–µ–Ω–∞']}|{info['—Ä–∞–∑–º–µ—Ä']}|{info['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']}"

        # –ù–∞–ø–∏—Ç–∫–∏
        config['–ù–∞–ø–∏—Ç–∫–∏'] = {}
        for drink, info in menu_data["–ù–∞–ø–∏—Ç–∫–∏"].items():
            config['–ù–∞–ø–∏—Ç–∫–∏'][drink] = f"{info['—Ü–µ–Ω–∞']}|{info['–æ–±—ä–µ–º']}"

        with open(f'config/{menu_file}', 'w', encoding='utf-8') as f:
            config.write(f)

    @staticmethod
    def save_toppings(toppings_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–æ–∫"""
        with open('config/toppings.txt', 'w', encoding='utf-8') as f:
            for topping, price in toppings_data.items():
                f.write(f"{topping}={price}\n")


class PizzaMakerApp(ctk.CTk):

    def __init__(self):
        super().__init__()

        self.title("Pizza Maker üçï")
        self.geometry("1000x700")
        self.resizable(True, True)

        self.orders_file = "orders.xlsx"
        self.inventory_file = "inventory.xlsx"
        self.config_manager = ConfigManager()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_configuration()

        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data = {}
        self.current_order = []
        self.total_amount = 0

        self.create_welcome_frame()

    def load_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            self.receipt_config = self.config_manager.load_receipt_config()
            self.menu_adult = self.config_manager.load_menu_config(
                'menu_adult.txt')
            self.menu_minor = self.config_manager.load_menu_config(
                'menu_minor.txt')
            self.toppings = self.config_manager.load_toppings()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                                 f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.create_default_config()

    def create_default_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.receipt_config = configparser.ConfigParser()
        self.receipt_config['–ß–µ–∫'] = {
            '–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏': 'Pizza Maker',
            '–ò–ù–ù': '1234567890',
            '–ê–¥—Ä–µ—Å': '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 1',
            '–¢–µ–ª–µ—Ñ–æ–Ω': '+7 (495) 123-45-67',
            '–°–∞–π—Ç': 'https://pizza-maker.ru',
            '–ù–î–°': '20%'
        }
        self.receipt_config['QR'] = {
            '–°—Å—ã–ª–∫–∞': 'https://genius-school.kuzstu.ru/pizza-maker'
        }

    def clear_frame(self):
        for widget in self.winfo_children():
            widget.destroy()

    def create_welcome_frame(self):
        self.clear_frame()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(self,
                                   text="üçï Pizza Maker",
                                   font=ctk.CTkFont(size=28, weight="bold"))
        title_label.pack(pady=40)

        # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        input_frame = ctk.CTkFrame(self)
        input_frame.pack(pady=20, padx=50, fill="both", expand=True)

        ctk.CTkLabel(input_frame,
                     text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                     font=ctk.CTkFont(size=20, weight="bold")).pack(pady=20)

        # –ü–æ–ª–µ –§–ò–û
        ctk.CTkLabel(input_frame, text="–§–ò–û:",
                     font=ctk.CTkFont(size=14)).pack(pady=5)
        self.fio_entry = ctk.CTkEntry(input_frame,
                                      placeholder_text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û",
                                      width=300,
                                      height=35)
        self.fio_entry.pack(pady=10)

        # –ü–æ–ª–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
        ctk.CTkLabel(input_frame, text="–í–æ–∑—Ä–∞—Å—Ç:",
                     font=ctk.CTkFont(size=14)).pack(pady=5)
        self.age_entry = ctk.CTkEntry(input_frame,
                                      placeholder_text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç",
                                      width=300,
                                      height=35)
        self.age_entry.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(input_frame)
        button_frame.pack(pady=30)

        continue_btn = ctk.CTkButton(button_frame,
                                     text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                                     command=self.process_user_info,
                                     height=40,
                                     font=ctk.CTkFont(size=16))
        continue_btn.pack(side="left", padx=10)

        settings_btn = ctk.CTkButton(button_frame,
                                     text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                     command=self.show_settings,
                                     height=40,
                                     font=ctk.CTkFont(size=16),
                                     fg_color="gray",
                                     hover_color="#4a4a4a")
        settings_btn.pack(side="left", padx=10)

    def process_user_info(self):
        fio = self.fio_entry.get().strip()
        age_text = self.age_entry.get().strip()

        if not fio:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û")
            return

        try:
            age = int(age_text)
            if age <= 0:
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞", "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
            return

        self.user_data = {"fio": fio, "age": age}
        self.create_menu_frame()

    def create_menu_frame(self):
        self.clear_frame()

        is_adult = self.user_data["age"] >= 18
        menu = self.menu_adult if is_adult else self.menu_minor

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        welcome_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {self.user_data['fio']}!"
        if is_adult:
            welcome_text += " –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –≤–∑—Ä–æ—Å–ª–æ–µ –º–µ–Ω—é üçï"
        else:
            welcome_text += " –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üçï"

        title_label = ctk.CTkLabel(self,
                                   text=welcome_text,
                                   font=ctk.CTkFont(size=20, weight="bold"))
        title_label.pack(pady=20)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)

        # –§—Ä–µ–π–º –º–µ–Ω—é
        menu_frame = ctk.CTkFrame(main_frame)
        menu_frame.pack(side="left",
                        padx=10,
                        pady=10,
                        fill="both",
                        expand=True)

        # –§—Ä–µ–π–º –∫–æ—Ä–∑–∏–Ω—ã
        cart_frame = ctk.CTkFrame(main_frame, width=300)
        cart_frame.pack(side="right", padx=10, pady=10, fill="y")

        # –í–∫–ª–∞–¥–∫–∏
        tabview = ctk.CTkTabview(menu_frame)
        tabview.pack(pady=10, padx=10, fill="both", expand=True)

        tab_pizzas = tabview.add("–ü–∏—Ü—Ü—ã")
        tab_drinks = tabview.add("–ù–∞–ø–∏—Ç–∫–∏")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ü—Ü —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
        for pizza, info in menu["–ü–∏—Ü—Ü—ã"].items():
            pizza_frame = ctk.CTkFrame(tab_pizzas)
            pizza_frame.pack(pady=5, padx=10, fill="x")

            pizza_text = f"{pizza} - {info['—Ü–µ–Ω–∞']} —Ä—É–±. ({info['—Ä–∞–∑–º–µ—Ä']})"
            ctk.CTkLabel(pizza_frame,
                         text=pizza_text,
                         font=ctk.CTkFont(size=14,
                                          weight="bold")).pack(anchor="w")

            ctk.CTkLabel(pizza_frame,
                         text=info['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã'],
                         font=ctk.CTkFont(size=12),
                         text_color="gray").pack(anchor="w")

            # –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
            size_frame = ctk.CTkFrame(pizza_frame)
            size_frame.pack(anchor="w", pady=5)

            ctk.CTkLabel(size_frame, text="–†–∞–∑–º–µ—Ä:", font=ctk.CTkFont(size=12)).pack(side="left", padx=5)
            size_var = ctk.StringVar(value=info['—Ä–∞–∑–º–µ—Ä'])

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ —Ü–µ–Ω—ã
            base_price = info['—Ü–µ–Ω–∞']
            size_prices = {}
            if is_adult:
                size_prices = {
                    "–ú–∞–ª–µ–Ω—å–∫–∞—è": int(base_price * 0.7),
                    "–°—Ä–µ–¥–Ω—è—è": int(base_price * 0.85),
                    "–ë–æ–ª—å—à–∞—è": base_price
                }
            else:
                size_prices = {
                    "–ú–∞–ª–µ–Ω—å–∫–∞—è": int(base_price * 0.75),
                    "–°—Ä–µ–¥–Ω—è—è": base_price,
                    "–ë–æ–ª—å—à–∞—è": int(base_price * 1.2)
                }

            size_options = list(size_prices.keys())
            size_menu = ctk.CTkOptionMenu(size_frame, variable=size_var, values=size_options, width=120)
            size_menu.pack(side="left", padx=5)

            add_btn = ctk.CTkButton(pizza_frame,
                                    text="–î–æ–±–∞–≤–∏—Ç—å",
                                    command=lambda p=pizza, sz=size_var, sp=size_prices:
                                    self.add_pizza_with_size(p, sz, sp),
                                    width=100)
            add_btn.pack(anchor="e", pady=5)

            if pizza == "–ö–∞—Å—Ç–æ–º–Ω–∞—è":
                custom_btn = ctk.CTkButton(
                    pizza_frame,
                    text="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é",
                    command=self.create_custom_pizza_dialog,
                    width=100,
                    fg_color="green",
                    hover_color="#006400")
                custom_btn.pack(anchor="e", pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –æ–±—ä–µ–º–∞
        for drink, info in menu["–ù–∞–ø–∏—Ç–∫–∏"].items():
            drink_frame = ctk.CTkFrame(tab_drinks)
            drink_frame.pack(pady=5, padx=10, fill="x")

            drink_text = f"{drink} - {info['—Ü–µ–Ω–∞']} —Ä—É–±. ({info['–æ–±—ä–µ–º']})"
            ctk.CTkLabel(drink_frame,
                         text=drink_text,
                         font=ctk.CTkFont(size=14,
                                          weight="bold")).pack(anchor="w")

            # –í—ã–±–æ—Ä –æ–±—ä–µ–º–∞
            volume_frame = ctk.CTkFrame(drink_frame)
            volume_frame.pack(anchor="w", pady=5)

            ctk.CTkLabel(volume_frame, text="–û–±—ä–µ–º:", font=ctk.CTkFont(size=12)).pack(side="left", padx=5)
            volume_var = ctk.StringVar(value=info['–æ–±—ä–µ–º'])
            volume_options = ["0.33–ª", "0.5–ª", "1–ª", "1.5–ª", "2–ª"]
            volume_menu = ctk.CTkOptionMenu(volume_frame, variable=volume_var, values=volume_options, width=100)
            volume_menu.pack(side="left", padx=5)

            add_btn = ctk.CTkButton(drink_frame,
                                    text="–î–æ–±–∞–≤–∏—Ç—å",
                                    command=lambda d=drink, price=info['—Ü–µ–Ω–∞'], vol=volume_var:
                                    self.add_drink_with_volume(d, price, vol),
                                    width=100)
            add_btn.pack(anchor="e", pady=5)

        # –ö–æ—Ä–∑–∏–Ω–∞
        ctk.CTkLabel(cart_frame,
                     text="üõí –í–∞—à –∑–∞–∫–∞–∑",
                     font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)

        self.cart_textbox = ctk.CTkTextbox(cart_frame, height=300, width=280)
        self.cart_textbox.pack(pady=10, padx=10, fill="both", expand=True)

        self.update_cart_display()

        ctk.CTkLabel(cart_frame,
                     text=f"–ò—Ç–æ–≥–æ: {self.total_amount} —Ä—É–±.",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)

        checkout_btn = ctk.CTkButton(cart_frame,
                                     text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                                     command=self.checkout,
                                     height=40,
                                     font=ctk.CTkFont(size=16))
        checkout_btn.pack(pady=10)

        clear_btn = ctk.CTkButton(cart_frame,
                                  text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                                  command=self.clear_cart,
                                  height=30,
                                  fg_color="gray",
                                  hover_color="#4a4a4a")
        clear_btn.pack(pady=5)

    def add_pizza_with_size(self, pizza, size_var, size_prices):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        size = size_var.get()
        price = size_prices[size]
        item_name = f"{pizza} ({size})"
        self.current_order.append({"item": item_name, "price": price, "quantity": 1})
        self.total_amount += price
        self.update_cart_display()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{item_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    def add_drink_with_volume(self, drink, price, volume_var):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º"""
        volume = volume_var.get()
        item_name = f"{drink} ({volume})"
        self.current_order.append({"item": item_name, "price": price, "quantity": 1})
        self.total_amount += price
        self.update_cart_display()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{item_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    def add_to_cart(self, item, price):
        self.current_order.append({"item": item, "price": price, "quantity": 1})
        self.total_amount += price
        self.update_cart_display()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{item} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    def update_cart_display(self):
        self.cart_textbox.delete("1.0", "end")
        if not self.current_order:
            self.cart_textbox.insert("1.0", "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        for i, order_item in enumerate(self.current_order, 1):
            self.cart_textbox.insert(
                "end",
                f"{i}. {order_item['item']} - {order_item['price']} —Ä—É–±.\n")

    def clear_cart(self):
        self.current_order = []
        self.total_amount = 0
        self.update_cart_display()

    def create_custom_pizza_dialog(self):
        dialog = ctk.CTkToplevel(self)
        dialog.title("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–∏—Ü—Ü—ã")
        dialog.geometry("500x600")
        dialog.resizable(False, False)

        is_adult = self.user_data["age"] >= 18
        base_price = 400 if is_adult else 300
        selected_toppings = []
        current_price = base_price

        def update_price():
            nonlocal current_price
            current_price = base_price + sum(self.toppings[top]
                                             for top in selected_toppings)
            price_label.configure(
                text=f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_price} —Ä—É–±.")

        ctk.CTkLabel(dialog,
                     text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫–∏:",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        price_label = ctk.CTkLabel(
            dialog,
            text=f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_price} —Ä—É–±.",
            font=ctk.CTkFont(size=14))
        price_label.pack(pady=5)

        scroll_frame = ctk.CTkScrollableFrame(dialog)
        scroll_frame.pack(pady=10, padx=20, fill="both", expand=True)

        topping_vars = {}

        for topping, price in self.toppings.items():
            frame = ctk.CTkFrame(scroll_frame)
            frame.pack(pady=2, fill="x")

            var = ctk.BooleanVar()
            topping_vars[topping] = var

            def make_callback(t):

                def callback():
                    if var.get():
                        if t not in selected_toppings:
                            selected_toppings.append(t)
                    else:
                        if t in selected_toppings:
                            selected_toppings.remove(t)
                    update_price()

                return callback

            chk = ctk.CTkCheckBox(frame,
                                  text=f"{topping} (+{price} —Ä—É–±.)",
                                  variable=var,
                                  command=make_callback(topping))
            chk.pack(side="left", padx=10, pady=5)

        def add_custom_pizza():
            if not selected_toppings:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                       "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–∞—á–∏–Ω–∫—É!")
                return

            description = f"–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–∏—Ü—Ü–∞ —Å: {', '.join(selected_toppings)}"
            self.current_order.append({
                "item": description,
                "price": current_price
            })
            self.total_amount += current_price
            self.update_cart_display()
            dialog.destroy()
            messagebox.showinfo("–£—Å–ø–µ—Ö",
                                "–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–∏—Ü—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

        ctk.CTkButton(dialog,
                      text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                      command=add_custom_pizza,
                      height=40).pack(pady=20)

    def checkout(self):
        if not self.current_order:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return

        self.create_payment_frame()

    def create_payment_frame(self):
        self.clear_frame()

        title_label = ctk.CTkLabel(self,
                                   text="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                                   font=ctk.CTkFont(size=24, weight="bold"))
        title_label.pack(pady=20)

        order_frame = ctk.CTkFrame(self)
        order_frame.pack(pady=10, padx=50, fill="x")

        ctk.CTkLabel(order_frame,
                     text="–í–∞—à –∑–∞–∫–∞–∑:",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        order_text = ctk.CTkTextbox(order_frame, height=150)
        order_text.pack(pady=10, padx=10, fill="x")

        for item in self.current_order:
            order_text.insert("end",
                              f"‚Ä¢ {item['item']} - {item['price']} —Ä—É–±.\n")

        order_text.configure(state="disabled")

        ctk.CTkLabel(order_frame,
                     text=f"–ò—Ç–æ–≥–æ: {self.total_amount} —Ä—É–±.",
                     font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)

        payment_frame = ctk.CTkFrame(self)
        payment_frame.pack(pady=20, padx=50, fill="x")

        ctk.CTkLabel(payment_frame,
                     text="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        self.payment_var = ctk.StringVar(value="card")

        card_btn = ctk.CTkRadioButton(payment_frame,
                                      text="üí≥ –ö–∞—Ä—Ç–∞ (–±–µ–∑ —Å–¥–∞—á–∏)",
                                      variable=self.payment_var,
                                      value="card")
        card_btn.pack(pady=5)

        cash_btn = ctk.CTkRadioButton(payment_frame,
                                      text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ",
                                      variable=self.payment_var,
                                      value="cash")
        cash_btn.pack(pady=5)

        self.cash_frame = ctk.CTkFrame(payment_frame)

        ctk.CTkLabel(self.cash_frame, text="–í–Ω–µ—Å–µ–Ω–Ω–∞—è —Å—É–º–º–∞:").pack(pady=5)
        self.cash_entry = ctk.CTkEntry(self.cash_frame,
                                       placeholder_text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        self.cash_entry.pack(pady=5)

        def on_payment_change():
            if self.payment_var.get() == "cash":
                self.cash_frame.pack(pady=10)
            else:
                self.cash_frame.pack_forget()

        card_btn.configure(command=on_payment_change)
        cash_btn.configure(command=on_payment_change)

        button_frame = ctk.CTkFrame(self)
        button_frame.pack(pady=20)

        ctk.CTkButton(button_frame,
                      text="–ù–∞–∑–∞–¥",
                      command=self.create_menu_frame,
                      width=120,
                      height=40).pack(side="left", padx=10)

        ctk.CTkButton(button_frame,
                      text="–û–ø–ª–∞—Ç–∏—Ç—å",
                      command=self.process_payment,
                      width=120,
                      height=40,
                      fg_color="green",
                      hover_color="#006400").pack(side="left", padx=10)

    def process_payment(self):
        payment_method = self.payment_var.get()
        change = 0

        if payment_method == "cash":
            try:
                cash_amount = int(self.cash_entry.get())
                if cash_amount < self.total_amount:
                    messagebox.showerror(
                        "–û—à–∏–±–∫–∞",
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ –µ—â–µ {self.total_amount - cash_amount} —Ä—É–±."
                    )
                    return
                change = cash_amount - self.total_amount
                payment_text = "–ù–∞–ª–∏—á–Ω—ã–µ"
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
                return
        else:
            payment_text = "–ö–∞—Ä—Ç–∞"

        receipt_id = self.generate_receipt(payment_text, change)
        self.show_receipt_frame(receipt_id, payment_text, change)

    def generate_receipt(self, payment_method, change):
        receipt_id = datetime.now().strftime("%Y%m%d%H%M%S")
        order_items = [item["item"] for item in self.current_order]

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        try:
            df = pd.read_excel(self.orders_file)
            new_order = {
                "ID": receipt_id,
                "–î–∞—Ç–∞": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                "–§–ò–û": self.user_data["fio"],
                "–í–æ–∑—Ä–∞—Å—Ç": self.user_data["age"],
                "–ó–∞–∫–∞–∑": "; ".join(order_items),
                "–°—É–º–º–∞": self.total_amount,
                "–û–ø–ª–∞—Ç–∞": payment_method,
                "–°–¥–∞—á–∞": change
            }
            df = pd.concat([df, pd.DataFrame([new_order])], ignore_index=True)
            df.to_excel(self.orders_file, index=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        self.generate_qr_code(receipt_id)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        self.update_inventory(order_items)

        return receipt_id

    def generate_qr_code(self, receipt_id):
        try:
            qr_link = self.receipt_config['QR']['–°—Å—ã–ª–∫–∞']
            qr_data = f"–ß–µ–∫ ‚Ññ: {receipt_id}\n"
            qr_data += f"–°—É–º–º–∞: {self.total_amount} —Ä—É–±.\n"
            qr_data += f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            qr_data += f"–°–∞–π—Ç: {qr_link}"

            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(qr_data)
            qr.make(fit=True)

            img = qr.make_image(fill_color="black", back_color="white")
            img.save(f"receipt_{receipt_id}.png")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")

    def generate_pdf_receipt(self, receipt_id, payment_method, change):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –ø–æ –§–ó-54"""
        try:
            pdf_filename = f"receipt_{receipt_id}.pdf"
            c = canvas.Canvas(pdf_filename, pagesize=letter)
            width, height = letter

            company_name = self.receipt_config['–ß–µ–∫']['–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏']
            inn = self.receipt_config['–ß–µ–∫']['–ò–ù–ù']
            address = self.receipt_config['–ß–µ–∫']['–ê–¥—Ä–µ—Å']
            vat_rate = self.receipt_config['–ß–µ–∫']['–ù–î–°']

            y_position = height - 80

            # –ö–ê–°–°–û–í–´–ô –ß–ï–ö (–§–ó-54)
            c.setFont("Helvetica-Bold", 14)
            c.drawCentredString(width / 2, y_position, "–ö–ê–°–°–û–í–´–ô –ß–ï–ö")
            y_position -= 30

            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
            c.setFont("Helvetica-Bold", 11)
            c.drawString(100, y_position, company_name)
            y_position -= 18

            c.setFont("Helvetica", 9)
            c.drawString(100, y_position, f"–ò–ù–ù: {inn}")
            y_position -= 15
            c.drawString(100, y_position, f"–ê–¥—Ä–µ—Å: {address}")
            y_position -= 15
            c.drawString(100, y_position, "–°–ù–û: –£–°–ù")
            y_position -= 25

            # –õ–∏–Ω–∏—è
            c.line(80, y_position, width - 80, y_position)
            y_position -= 20

            # –î–∞—Ç–∞ –∏ —Å–º–µ–Ω–∞
            c.setFont("Helvetica", 9)
            receipt_date = datetime.now()
            c.drawString(100, y_position, f"–î–∞—Ç–∞: {receipt_date.strftime('%d.%m.%Y %H:%M:%S')}")
            y_position -= 15
            c.drawString(100, y_position, f"–ö–∞—Å—Å–∏—Ä: {self.user_data.get('fio', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')}")
            y_position -= 15
            c.drawString(100, y_position, f"–°–º–µ–Ω–∞ ‚Ññ: 1")
            y_position -= 15
            c.drawString(100, y_position, f"–ß–µ–∫ ‚Ññ: {receipt_id}")
            y_position -= 25

            # –õ–∏–Ω–∏—è
            c.line(80, y_position, width - 80, y_position)
            y_position -= 20

            # –¢–û–í–ê–†–´ (—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, —Ü–µ–Ω–æ–π, —Å—É–º–º–æ–π)
            c.setFont("Helvetica-Bold", 10)
            c.drawString(100, y_position, "–¢–û–í–ê–†–´:")
            y_position -= 18

            c.setFont("Helvetica", 8)
            vat_amount = 0
            for item in self.current_order:
                item_name = item['item']
                quantity = item.get('quantity', 1)
                price = item['price']
                total = price * quantity
                item_vat = int(total * 20 / 120)
                vat_amount += item_vat

                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                c.drawString(100, y_position, item_name)
                y_position -= 12
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ x –¶–µ–Ω–∞ = –°—É–º–º–∞
                c.drawString(110, y_position, f"{quantity} x {price}.00 = {total}.00")
                y_position -= 12
                # –ù–î–° 20%
                c.drawString(110, y_position, f"–ù–î–° 20%: {item_vat}.00")
                y_position -= 18

            # –õ–∏–Ω–∏—è
            c.line(80, y_position, width - 80, y_position)
            y_position -= 20

            # –ò–¢–û–ì–û
            c.setFont("Helvetica-Bold", 11)
            c.drawString(100, y_position, f"–ò–¢–û–ì–û: {self.total_amount}.00 —Ä—É–±")
            y_position -= 18

            # –ù–î–°
            c.setFont("Helvetica", 9)
            c.drawString(100, y_position, f"–≤ —Ç.—á. –ù–î–° 20%: {vat_amount}.00 —Ä—É–±")
            y_position -= 20

            # –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã
            c.setFont("Helvetica-Bold", 9)
            if payment_method == "–ù–∞–ª–∏—á–Ω—ã–µ":
                c.drawString(100, y_position, f"–ù–ê–õ–ò–ß–ù–´–ú–ò: {self.total_amount}.00 —Ä—É–±")
                y_position -= 15
                if change > 0:
                    c.drawString(100, y_position, f"–°–¥–∞—á–∞: {change}.00 —Ä—É–±")
                    y_position -= 15
            else:
                c.drawString(100, y_position, f"–ë–ï–ó–ù–ê–õ–ò–ß–ù–´–ú–ò: {self.total_amount}.00 —Ä—É–±")
                y_position -= 15

            y_position -= 10
            c.line(80, y_position, width - 80, y_position)
            y_position -= 20

            # –§–∏—Å–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            c.setFont("Helvetica", 8)
            c.drawString(100, y_position, f"–†–ù –ö–ö–¢: 0000{inn[:10]}")
            y_position -= 12
            c.drawString(100, y_position, f"–ó–ù –ö–ö–¢: 00000000{inn[:6]}")
            y_position -= 12
            c.drawString(100, y_position, f"–§–ù: 9999{inn[:8]}")
            y_position -= 12
            c.drawString(100, y_position, f"–§–î: {receipt_id}")
            y_position -= 12
            fiscal_sign = int(receipt_id[-8:]) if len(receipt_id) >= 8 else int(receipt_id)
            c.drawString(100, y_position, f"–§–ü: {fiscal_sign}")
            y_position -= 20

            # QR-–∫–æ–¥
            qr_image_path = f"receipt_{receipt_id}.png"
            if os.path.exists(qr_image_path):
                c.drawImage(qr_image_path, 180, 50, width=150, height=150)

            c.save()
            return pdf_filename

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            return None

    def update_inventory(self, order_items):
        try:
            df = pd.read_excel(self.inventory_file)

            for item in order_items:
                if "–ø–∏—Ü—Ü–∞" in item.lower():
                    df.loc[df["–ü—Ä–æ–¥—É–∫—Ç"] == "–¢–µ—Å—Ç–æ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] -= 1
                    df.loc[df["–ü—Ä–æ–¥—É–∫—Ç"] == "–°—ã—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] -= 0.2

                for topping in self.toppings.keys():
                    if topping.lower() in item.lower():
                        df.loc[df["–ü—Ä–æ–¥—É–∫—Ç"] == topping, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] -= 0.05

                for drink in ["–ö–æ–ª–∞", "–§–∞–Ω—Ç–∞", "–°–ø—Ä–∞–π—Ç", "–í–æ–¥–∞", "–°–æ–∫"]:
                    if drink in item:
                        df.loc[df["–ü—Ä–æ–¥—É–∫—Ç"] == drink, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] -= 1

            df.to_excel(self.inventory_file, index=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")

    def show_receipt_frame(self, receipt_id, payment_method, change):
        self.clear_frame()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —á–µ–∫–∞
        pdf_file = self.generate_pdf_receipt(receipt_id, payment_method, change)

        title_label = ctk.CTkLabel(self,
                                   text="–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ",
                                   font=ctk.CTkFont(size=24, weight="bold"))
        title_label.pack(pady=20)

        receipt_frame = ctk.CTkFrame(self)
        receipt_frame.pack(pady=10, padx=50, fill="both", expand=True)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        company_name = self.receipt_config['–ß–µ–∫']['–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏']
        inn = self.receipt_config['–ß–µ–∫']['–ò–ù–ù']
        address = self.receipt_config['–ß–µ–∫']['–ê–¥—Ä–µ—Å']
        phone = self.receipt_config['–ß–µ–∫']['–¢–µ–ª–µ—Ñ–æ–Ω']
        vat = self.receipt_config['–ß–µ–∫']['–ù–î–°']

        receipt_text = f"""{company_name}
–ò–ù–ù: {inn}
–ê–¥—Ä–µ—Å: {address}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}

–ß–ï–ö ‚Ññ: {receipt_id}
–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
–ö–ª–∏–µ–Ω—Ç: {self.user_data['fio']}
–í–æ–∑—Ä–∞—Å—Ç: {self.user_data['age']}

–ó–ê–ö–ê–ó:
"""
        for item in self.current_order:
            receipt_text += f"‚Ä¢ {item['item']} - {item['price']} —Ä—É–±.\n"

        receipt_text += f"\n–ò–¢–û–ì–û: {self.total_amount} —Ä—É–±."
        receipt_text += f"\n–ù–î–°: {vat}"
        receipt_text += f"\n–û–ø–ª–∞—Ç–∞: {payment_method}"

        if payment_method == "–ù–∞–ª–∏—á–Ω—ã–µ":
            receipt_text += f"\n–í–Ω–µ—Å–µ–Ω–æ: {self.total_amount + change} —Ä—É–±."
            receipt_text += f"\n–°–¥–∞—á–∞: {change} —Ä—É–±."

        receipt_text += f"\n\nPDF —á–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_file}"

        receipt_display = ctk.CTkTextbox(receipt_frame,
                                         font=ctk.CTkFont(family="Courier",
                                                          size=12))
        receipt_display.pack(pady=20, padx=20, fill="both", expand=True)
        receipt_display.insert("1.0", receipt_text)
        receipt_display.configure(state="disabled")

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —á–µ–∫–∞
        receipt_actions_frame = ctk.CTkFrame(self)
        receipt_actions_frame.pack(pady=10)

        ctk.CTkLabel(receipt_actions_frame,
                     text="–î–µ–π—Å—Ç–≤–∏—è —Å —á–µ–∫–æ–º:",
                     font=ctk.CTkFont(size=14, weight="bold")).pack(pady=5)

        receipt_btns_frame = ctk.CTkFrame(receipt_actions_frame)
        receipt_btns_frame.pack(pady=5)

        ctk.CTkButton(receipt_btns_frame,
                      text="üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                      command=lambda: self.send_receipt(pdf_file),
                      width=120,
                      height=35,
                      fg_color="blue",
                      hover_color="#00008b").pack(side="left", padx=5)

        ctk.CTkButton(receipt_btns_frame,
                      text="üíæ –°–∫–∞—á–∞—Ç—å",
                      command=lambda: self.download_receipt(pdf_file),
                      width=120,
                      height=35,
                      fg_color="purple",
                      hover_color="#4b0082").pack(side="left", padx=5)

        ctk.CTkButton(receipt_btns_frame,
                      text="üñ®Ô∏è –ü–µ—á–∞—Ç—å",
                      command=lambda: self.print_receipt(pdf_file),
                      width=120,
                      height=35,
                      fg_color="orange",
                      hover_color="#cc5500").pack(side="left", padx=5)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(self)
        button_frame.pack(pady=20)

        ctk.CTkButton(button_frame,
                      text="–ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
                      command=self.restart_app,
                      width=150,
                      height=40,
                      fg_color="green",
                      hover_color="#006400").pack(side="left", padx=10)

        ctk.CTkButton(button_frame,
                      text="–í—ã—Ö–æ–¥",
                      command=self.quit,
                      width=150,
                      height=40,
                      fg_color="red",
                      hover_color="#8b0000").pack(side="left", padx=10)

    def send_receipt(self, pdf_file):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –ø–æ email"""
        email = simpledialog.askstring("–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞", "–í–≤–µ–¥–∏—Ç–µ email:")
        if email:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}\n(–î–µ–º–æ: —Ñ—É–Ω–∫—Ü–∏—è email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)")

    def download_receipt(self, pdf_file):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–∫–∞"""
        if pdf_file and os.path.exists(pdf_file):
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_file}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def print_receipt(self, pdf_file):
        """–ü–µ—á–∞—Ç—å —á–µ–∫–∞"""
        if pdf_file and os.path.exists(pdf_file):
            try:
                if os.name == 'posix':  # Linux/Mac
                    os.system(f"lpr {pdf_file}")
                elif os.name == 'nt':  # Windows
                    os.startfile(pdf_file, "print")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å!")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def show_settings(self):
        """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∑–∞—â–∏—Ç–æ–π –ø–∞—Ä–æ–ª–µ–º"""
        password = simpledialog.askstring("–í—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                                          "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                                          show='*')
        if password == "123":
            SettingsWindow(self)
        elif password is not None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

    def restart_app(self):
        self.user_data = {}
        self.current_order = []
        self.total_amount = 0
        self.load_configuration()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.create_welcome_frame()


class SettingsWindow(ctk.CTkToplevel):

    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.config_manager = parent.config_manager

        self.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Pizza Maker")
        self.geometry("800x600")
        self.resizable(True, True)

        self.create_widgets()
        self.load_current_settings()

    def create_widgets(self):
        # –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        tabview = ctk.CTkTabview(self)
        tabview.pack(pady=10, padx=10, fill="both", expand=True)

        tab_receipt = tabview.add("–ß–µ–∫")
        tab_menu_adult = tabview.add("–ú–µ–Ω—é –í–∑—Ä–æ—Å–ª–æ–µ")
        tab_menu_minor = tabview.add("–ú–µ–Ω—é –î–µ—Ç—Å–∫–æ–µ")
        tab_toppings = tabview.add("–ù–∞—á–∏–Ω–∫–∏")

        self.create_receipt_tab(tab_receipt)
        self.create_menu_tab(tab_menu_adult, "adult")
        self.create_menu_tab(tab_menu_minor, "minor")
        self.create_toppings_tab(tab_toppings)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(self)
        button_frame.pack(pady=10)

        ctk.CTkButton(button_frame,
                      text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=self.save_all_settings,
                      width=120,
                      height=40).pack(side="left", padx=10)

        ctk.CTkButton(button_frame,
                      text="–û—Ç–º–µ–Ω–∞",
                      command=self.destroy,
                      width=120,
                      height=40,
                      fg_color="gray",
                      hover_color="#4a4a4a").pack(side="left", padx=10)

    def create_receipt_tab(self, parent):
        scroll_frame = ctk.CTkScrollableFrame(parent)
        scroll_frame.pack(pady=10, padx=10, fill="both", expand=True)

        self.receipt_entries = {}
        fields = [("–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"), ("–ò–ù–ù", "–ò–ù–ù"),
                  ("–ê–¥—Ä–µ—Å", "–ê–¥—Ä–µ—Å"), ("–¢–µ–ª–µ—Ñ–æ–Ω", "–¢–µ–ª–µ—Ñ–æ–Ω"), ("–°–∞–π—Ç", "–°–∞–π—Ç"),
                  ("–ù–î–°", "–ù–î–° (%)")]

        for key, label in fields:
            ctk.CTkLabel(scroll_frame,
                         text=label,
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                               pady=(10, 5))
            entry = ctk.CTkEntry(scroll_frame, width=400)
            entry.pack(anchor="w", fill="x", pady=(0, 10))
            self.receipt_entries[key] = entry

        ctk.CTkLabel(scroll_frame,
                     text="QR –°—Å—ã–ª–∫–∞",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                           pady=(10, 5))
        self.qr_entry = ctk.CTkEntry(scroll_frame, width=400)
        self.qr_entry.pack(anchor="w", fill="x", pady=(0, 10))

    def create_menu_tab(self, parent, menu_type):
        scroll_frame = ctk.CTkScrollableFrame(parent)
        scroll_frame.pack(pady=10, padx=10, fill="both", expand=True)

        if menu_type == "adult":
            menu_data = self.parent.menu_adult
            self.menu_adult_entries = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
            current_entries = self.menu_adult_entries
        else:
            menu_data = self.parent.menu_minor
            self.menu_minor_entries = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
            current_entries = self.menu_minor_entries

        # –ü–∏—Ü—Ü—ã
        ctk.CTkLabel(scroll_frame,
                     text="–ü–ò–¶–¶–´",
                     font=ctk.CTkFont(size=16,
                                      weight="bold")).pack(anchor="w",
                                                           pady=(10, 5))

        for pizza, info in menu_data["–ü–∏—Ü—Ü—ã"].items():
            pizza_frame = ctk.CTkFrame(scroll_frame)
            pizza_frame.pack(fill="x", pady=5)

            ctk.CTkLabel(pizza_frame,
                         text=pizza,
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w")

            entry_frame = ctk.CTkFrame(pizza_frame)
            entry_frame.pack(fill="x", pady=5)

            ctk.CTkLabel(entry_frame, text="–¶–µ–Ω–∞:").pack(side="left", padx=5)
            price_entry = ctk.CTkEntry(entry_frame, width=80)
            price_entry.insert(0, str(info["—Ü–µ–Ω–∞"]))
            price_entry.pack(side="left", padx=5)

            ctk.CTkLabel(entry_frame, text="–†–∞–∑–º–µ—Ä:").pack(side="left", padx=5)
            size_entry = ctk.CTkEntry(entry_frame, width=100)
            size_entry.insert(0, info["—Ä–∞–∑–º–µ—Ä"])
            size_entry.pack(side="left", padx=5)

            ctk.CTkLabel(entry_frame, text="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:").pack(side="left",
                                                                padx=5)
            ingredients_entry = ctk.CTkEntry(entry_frame, width=200)
            ingredients_entry.insert(0, info["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"])
            ingredients_entry.pack(side="left", padx=5)

            current_entries["–ü–∏—Ü—Ü—ã"][pizza] = {
                "—Ü–µ–Ω–∞": price_entry,
                "—Ä–∞–∑–º–µ—Ä": size_entry,
                "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": ingredients_entry
            }

        # –ù–∞–ø–∏—Ç–∫–∏
        ctk.CTkLabel(scroll_frame,
                     text="–ù–ê–ü–ò–¢–ö–ò",
                     font=ctk.CTkFont(size=16,
                                      weight="bold")).pack(anchor="w",
                                                           pady=(20, 5))

        for drink, info in menu_data["–ù–∞–ø–∏—Ç–∫–∏"].items():
            drink_frame = ctk.CTkFrame(scroll_frame)
            drink_frame.pack(fill="x", pady=5)

            ctk.CTkLabel(drink_frame,
                         text=drink,
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w")

            entry_frame = ctk.CTkFrame(drink_frame)
            entry_frame.pack(fill="x", pady=5)

            ctk.CTkLabel(entry_frame, text="–¶–µ–Ω–∞:").pack(side="left", padx=5)
            price_entry = ctk.CTkEntry(entry_frame, width=80)
            price_entry.insert(0, str(info["—Ü–µ–Ω–∞"]))
            price_entry.pack(side="left", padx=5)

            ctk.CTkLabel(entry_frame, text="–û–±—ä–µ–º:").pack(side="left", padx=5)
            volume_entry = ctk.CTkEntry(entry_frame, width=100)
            volume_entry.insert(0, info["–æ–±—ä–µ–º"])
            volume_entry.pack(side="left", padx=5)

            current_entries["–ù–∞–ø–∏—Ç–∫–∏"][drink] = {
                "—Ü–µ–Ω–∞": price_entry,
                "–æ–±—ä–µ–º": volume_entry
            }

    def create_toppings_tab(self, parent):
        scroll_frame = ctk.CTkScrollableFrame(parent)
        scroll_frame.pack(pady=10, padx=10, fill="both", expand=True)

        self.topping_entries = {}

        for topping, price in self.parent.toppings.items():
            frame = ctk.CTkFrame(scroll_frame)
            frame.pack(fill="x", pady=2)

            ctk.CTkLabel(frame, text=topping, width=150).pack(side="left",
                                                              padx=10)
            price_entry = ctk.CTkEntry(frame, width=100)
            price_entry.insert(0, str(price))
            price_entry.pack(side="left", padx=10)

            self.topping_entries[topping] = price_entry

    def load_current_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ø–æ–ª—è"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–∫–∞
            for key, entry in self.receipt_entries.items():
                entry.delete(0, "end")
                entry.insert(0, self.parent.receipt_config['–ß–µ–∫'][key])

            self.qr_entry.delete(0, "end")
            self.qr_entry.insert(0, self.parent.receipt_config['QR']['–°—Å—ã–ª–∫–∞'])

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def save_all_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–∞
            receipt_data = {}
            for key, entry in self.receipt_entries.items():
                receipt_data[key] = entry.get()

            qr_data = {'–°—Å—ã–ª–∫–∞': self.qr_entry.get()}

            self.config_manager.save_receipt_config({
                'receipt': receipt_data,
                'qr': qr_data
            })

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é –≤–∑—Ä–æ—Å–ª–æ–µ
            adult_menu = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
            for pizza, entries in self.menu_adult_entries["–ü–∏—Ü—Ü—ã"].items():
                adult_menu["–ü–∏—Ü—Ü—ã"][pizza] = {
                    "—Ü–µ–Ω–∞": int(entries["—Ü–µ–Ω–∞"].get()),
                    "—Ä–∞–∑–º–µ—Ä": entries["—Ä–∞–∑–º–µ—Ä"].get(),
                    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": entries["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"].get()
                }

            for drink, entries in self.menu_adult_entries["–ù–∞–ø–∏—Ç–∫–∏"].items():
                adult_menu["–ù–∞–ø–∏—Ç–∫–∏"][drink] = {
                    "—Ü–µ–Ω–∞": int(entries["—Ü–µ–Ω–∞"].get()),
                    "–æ–±—ä–µ–º": entries["–æ–±—ä–µ–º"].get()
                }

            self.config_manager.save_menu_config(adult_menu, 'menu_adult.txt')

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é –¥–µ—Ç—Å–∫–æ–µ
            minor_menu = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
            for pizza, entries in self.menu_minor_entries["–ü–∏—Ü—Ü—ã"].items():
                minor_menu["–ü–∏—Ü—Ü—ã"][pizza] = {
                    "—Ü–µ–Ω–∞": int(entries["—Ü–µ–Ω–∞"].get()),
                    "—Ä–∞–∑–º–µ—Ä": entries["—Ä–∞–∑–º–µ—Ä"].get(),
                    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": entries["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"].get()
                }

            for drink, entries in self.menu_minor_entries["–ù–∞–ø–∏—Ç–∫–∏"].items():
                minor_menu["–ù–∞–ø–∏—Ç–∫–∏"][drink] = {
                    "—Ü–µ–Ω–∞": int(entries["—Ü–µ–Ω–∞"].get()),
                    "–æ–±—ä–µ–º": entries["–æ–±—ä–µ–º"].get()
                }

            self.config_manager.save_menu_config(minor_menu, 'menu_minor.txt')

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–æ–∫
            toppings_data = {}
            for topping, entry in self.topping_entries.items():
                toppings_data[topping] = int(entry.get())

            self.config_manager.save_toppings(toppings_data)

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            self.parent.load_configuration()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            self.destroy()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('config'):
        messagebox.showwarning(
            "–í–Ω–∏–º–∞–Ω–∏–µ",
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ setup.py –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
        )
    else:
        app = PizzaMakerApp()
        app.mainloop()
