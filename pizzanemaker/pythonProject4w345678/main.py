import customtkinter as ctk
import pandas as pd
import qrcode
import os
import configparser
from datetime import datetime
from PIL import Image, ImageTk
import tkinter.messagebox as messagebox
from tkinter import simpledialog, scrolledtext
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
import matplotlib.pyplot as plt
from collections import Counter
import numpy as np

ctk.set_appearance_mode("Dark")
ctk.set_default_color_theme("blue")


class DataManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ Excel —Ñ–∞–π–ª–∞–º–∏"""

    def __init__(self):
        self.data_dir = "data"
        self.orders_file = os.path.join(self.data_dir, "orders.xlsx")
        self.inventory_file = os.path.join(self.data_dir, "inventory.xlsx")
        self.ensure_data_directory()

    def ensure_data_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.data_dir):
            os.makedirs(self.data_dir)

    def load_orders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Excel"""
        try:
            if os.path.exists(self.orders_file):
                df = pd.read_excel(self.orders_file)
                return df
            else:
                return self.create_new_orders_file()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
            return self.create_new_orders_file()

    def create_new_orders_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–æ–≤"""
        df = pd.DataFrame(columns=[
            'ID', '–î–∞—Ç–∞', '–§–ò–û', '–í–æ–∑—Ä–∞—Å—Ç', '–ó–∞–∫–∞–∑', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            '–°—É–º–º–∞', '–û–ø–ª–∞—Ç–∞', '–°–¥–∞—á–∞'
        ])
        self.save_orders(df)
        return df

    def save_orders(self, df):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ Excel"""
        try:
            df.to_excel(self.orders_file, index=False)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            return False

    def add_order(self, order_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        try:
            df = self.load_orders()
            new_order_df = pd.DataFrame([order_data])
            df = pd.concat([df, new_order_df], ignore_index=True)
            return self.save_orders(df)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return False

    def load_inventory(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ Excel"""
        try:
            if os.path.exists(self.inventory_file):
                df = pd.read_excel(self.inventory_file)
                return df
            else:
                return self.create_new_inventory_file()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return self.create_new_inventory_file()

    def create_new_inventory_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        inventory_data = {
            '–ü—Ä–æ–¥—É–∫—Ç': [
                '–¢–µ—Å—Ç–æ', '–°—ã—Ä', '–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å', '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏', '–í–µ—Ç—á–∏–Ω–∞',
                '–ë–µ–∫–æ–Ω', '–ì—Ä–∏–±—ã', '–ü–µ—Ä–µ—Ü', '–õ—É–∫', '–û–ª–∏–≤–∫–∏', '–ê–Ω–∞–Ω–∞—Å—ã',
                '–ö–æ–ª–∞', '–§–∞–Ω—Ç–∞', '–°–ø—Ä–∞–π—Ç', '–í–æ–¥–∞', '–°–æ–∫'
            ],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [
                100, 20.0, 15.0, 8.0, 10.0, 6.0, 12.0, 15.0, 10.0, 8.0, 7.0,
                50, 50, 50, 50, 30
            ],
            '–ï–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è': [
                '—à—Ç', '–∫–≥', '–ª', '–∫–≥', '–∫–≥', '–∫–≥', '–∫–≥', '–∫–≥', '–∫–≥', '–∫–≥', '–∫–≥',
                '—à—Ç', '—à—Ç', '—à—Ç', '—à—Ç', '—à—Ç'
            ],
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π_–∑–∞–ø–∞—Å': [
                10, 2.0, 2.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 0.5,
                10, 10, 10, 10, 5
            ]
        }

        df = pd.DataFrame(inventory_data)
        self.save_inventory(df)
        return df

    def save_inventory(self, df):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ Excel"""
        try:
            df.to_excel(self.inventory_file, index=False)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return False

    def update_inventory(self, order_items):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–∞–∑–∞"""
        try:
            df = self.load_inventory()

            for item in order_items:
                item_lower = item.lower()

                # –£—á–µ—Ç –ø–∏—Ü—Ü
                if "–ø–∏—Ü—Ü–∞" in item_lower:
                    self._decrement_product(df, "–¢–µ—Å—Ç–æ", 1)
                    self._decrement_product(df, "–°—ã—Ä", 0.2)
                    self._decrement_product(df, "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", 0.1)

                # –£—á–µ—Ç –Ω–∞—á–∏–Ω–æ–∫
                toppings_mapping = {
                    '–ø–µ–ø–ø–µ—Ä–æ–Ω–∏': '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏',
                    '–≤–µ—Ç—á–∏–Ω–∞': '–í–µ—Ç—á–∏–Ω–∞',
                    '–±–µ–∫–æ–Ω': '–ë–µ–∫–æ–Ω',
                    '–≥—Ä–∏–±—ã': '–ì—Ä–∏–±—ã',
                    '–ø–µ—Ä–µ—Ü': '–ü–µ—Ä–µ—Ü',
                    '–ª—É–∫': '–õ—É–∫',
                    '–æ–ª–∏–≤–∫–∏': '–û–ª–∏–≤–∫–∏',
                    '–∞–Ω–∞–Ω–∞—Å—ã': '–ê–Ω–∞–Ω–∞—Å—ã'
                }

                for topping_key, product_name in toppings_mapping.items():
                    if topping_key in item_lower:
                        self._decrement_product(df, product_name, 0.05)

                # –£—á–µ—Ç –Ω–∞–ø–∏—Ç–∫–æ–≤
                drinks_mapping = {
                    '–∫–æ–ª–∞': '–ö–æ–ª–∞',
                    '—Ñ–∞–Ω—Ç–∞': '–§–∞–Ω—Ç–∞',
                    '—Å–ø—Ä–∞–π—Ç': '–°–ø—Ä–∞–π—Ç',
                    '–≤–æ–¥–∞': '–í–æ–¥–∞',
                    '—Å–æ–∫': '–°–æ–∫'
                }

                for drink_key, product_name in drinks_mapping.items():
                    if drink_key in item_lower:
                        self._decrement_product(df, product_name, 1)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∞—Å–æ–≤
            low_stock = df[df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] <= df['–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π_–∑–∞–ø–∞—Å']]
            if not low_stock.empty:
                low_stock_products = low_stock['–ü—Ä–æ–¥—É–∫—Ç'].tolist()
                messagebox.showwarning(
                    "–í–Ω–∏–º–∞–Ω–∏–µ",
                    f"–ù–∏–∑–∫–∏–π –∑–∞–ø–∞—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n{', '.join(low_stock_products)}"
                )

            return self.save_inventory(df)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return False

    def _decrement_product(self, df, product_name, amount):
        """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        mask = df['–ü—Ä–æ–¥—É–∫—Ç'] == product_name
        if mask.any():
            current_value = df.loc[mask, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].iloc[0]
            if current_value >= amount:
                df.loc[mask, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = current_value - amount


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""

    def __init__(self):
        self.config_dir = "config"
        self.ensure_config_directory()

    def ensure_config_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)

    def load_receipt_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–∞"""
        config = configparser.ConfigParser()
        try:
            config.read('config/receipt_config.txt', encoding='utf-8')
            if not config.sections():
                raise FileNotFoundError
            return config
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–∞: {e}")
            return self.create_default_receipt_config()

    def create_default_receipt_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        config = configparser.ConfigParser()
        config['–ß–µ–∫'] = {
            '–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏': 'Pizza Maker üçï',
            '–ò–ù–ù': '123456789012',
            '–ê–¥—Ä–µ—Å': '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 1',
            '–¢–µ–ª–µ—Ñ–æ–Ω': '+7 (495) 123-45-67',
            '–°–∞–π—Ç': 'https://pizza-maker.ru',
            '–ù–î–°': '20%'
        }
        config['QR'] = {
            '–°—Å—ã–ª–∫–∞': 'https://genius-school.kuzstu.ru/pizza-maker'
        }
        return config

    def load_images_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        images_config = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
        try:
            config = configparser.ConfigParser()
            config.read('config/images_config.txt', encoding='utf-8')

            if '–ü–∏—Ü—Ü—ã' in config:
                for pizza, image_path in config['–ü–∏—Ü—Ü—ã'].items():
                    images_config["–ü–∏—Ü—Ü—ã"][pizza] = image_path

            if '–ù–∞–ø–∏—Ç–∫–∏' in config:
                for drink, image_path in config['–ù–∞–ø–∏—Ç–∫–∏'].items():
                    images_config["–ù–∞–ø–∏—Ç–∫–∏"][drink] = image_path

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

        return images_config

    def load_discounts_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–∏–¥–æ–∫"""
        discounts = {
            "–Ω–∞–ø–∏—Ç–∫–∏": {},
            "–ø–∏—Ü—Ü—ã_–≤–∑—Ä–æ—Å–ª—ã–µ": {},
            "–ø–∏—Ü—Ü—ã_–¥–µ—Ç—Å–∫–∏–µ": {}
        }
        try:
            config = configparser.ConfigParser()
            config.read('config/discounts_config.txt', encoding='utf-8')

            if '–°–∫–∏–¥–∫–∏_–Ω–∞–ø–∏—Ç–∫–∏' in config:
                for volume, discount in config['–°–∫–∏–¥–∫–∏_–Ω–∞–ø–∏—Ç–∫–∏'].items():
                    discounts["–Ω–∞–ø–∏—Ç–∫–∏"][volume] = float(discount)

            if '–°–∫–∏–¥–∫–∏_–ø–∏—Ü—Ü—ã' in config:
                for size, multiplier in config['–°–∫–∏–¥–∫–∏_–ø–∏—Ü—Ü—ã'].items():
                    discounts["–ø–∏—Ü—Ü—ã_–≤–∑—Ä–æ—Å–ª—ã–µ"][size] = float(multiplier)

            if '–°–∫–∏–¥–∫–∏_–¥–µ—Ç—Å–∫–∏–µ' in config:
                for size, multiplier in config['–°–∫–∏–¥–∫–∏_–¥–µ—Ç—Å–∫–∏–µ'].items():
                    discounts["–ø–∏—Ü—Ü—ã_–¥–µ—Ç—Å–∫–∏–µ"][size] = float(multiplier)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–∏–¥–æ–∫: {e}")
            discounts = {
                "–Ω–∞–ø–∏—Ç–∫–∏": {"0.33–ª": 0.0, "0.5–ª": 5.0, "1–ª": 10.0, "1.5–ª": 15.0, "2–ª": 20.0},
                "–ø–∏—Ü—Ü—ã_–≤–∑—Ä–æ—Å–ª—ã–µ": {"–ú–∞–ª–µ–Ω—å–∫–∞—è": 0.7, "–°—Ä–µ–¥–Ω—è—è": 0.85, "–ë–æ–ª—å—à–∞—è": 1.0},
                "–ø–∏—Ü—Ü—ã_–¥–µ—Ç—Å–∫–∏–µ": {"–ú–∞–ª–µ–Ω—å–∫–∞—è": 0.75, "–°—Ä–µ–¥–Ω—è—è": 1.0, "–ë–æ–ª—å—à–∞—è": 1.2}
            }

        return discounts

    def load_menu_config(self, menu_file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –∏–∑ —Ñ–∞–π–ª–∞"""
        menu = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
        try:
            config = configparser.ConfigParser()
            config.read(f'config/{menu_file}', encoding='utf-8')

            if '–ü–∏—Ü—Ü—ã' in config:
                for pizza, value in config['–ü–∏—Ü—Ü—ã'].items():
                    try:
                        price, size, ingredients = value.split('|')
                        menu["–ü–∏—Ü—Ü—ã"][pizza.replace('_', ' ')] = {
                            "—Ü–µ–Ω–∞": int(price),
                            "—Ä–∞–∑–º–µ—Ä": size,
                            "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": ingredients
                        }
                    except ValueError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Ü—Ü—ã {pizza}: {e}")

            if '–ù–∞–ø–∏—Ç–∫–∏' in config:
                for drink, value in config['–ù–∞–ø–∏—Ç–∫–∏'].items():
                    try:
                        price, volume = value.split('|')
                        menu["–ù–∞–ø–∏—Ç–∫–∏"][drink] = {"—Ü–µ–Ω–∞": int(price), "–æ–±—ä–µ–º": volume}
                    except ValueError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–ø–∏—Ç–∫–∞ {drink}: {e}")

            return menu
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é {menu_file}: {e}")
            return self.create_default_menu(menu_file)

    def create_default_menu(self, menu_file):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        menu = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}

        if "adult" in menu_file:
            menu["–ü–∏—Ü—Ü—ã"] = {
                "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": {"—Ü–µ–Ω–∞": 450, "—Ä–∞–∑–º–µ—Ä": "–ë–æ–ª—å—à–∞—è", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫"},
                "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏": {"—Ü–µ–Ω–∞": 550, "—Ä–∞–∑–º–µ—Ä": "–ë–æ–ª—å—à–∞—è", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –ø–µ–ø–ø–µ—Ä–æ–Ω–∏, –º–æ—Ü–∞—Ä–µ–ª–ª–∞"},
                "–ì–∞–≤–∞–π—Å–∫–∞—è": {"—Ü–µ–Ω–∞": 500, "—Ä–∞–∑–º–µ—Ä": "–ë–æ–ª—å—à–∞—è",
                              "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –≤–µ—Ç—á–∏–Ω–∞, –∞–Ω–∞–Ω–∞—Å—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞"},
                "–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞": {"—Ü–µ–Ω–∞": 600, "—Ä–∞–∑–º–µ—Ä": "–ë–æ–ª—å—à–∞—è",
                                "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞, –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–∞, –ø–∞—Ä–º–µ–∑–∞–Ω, —Ä–∏–∫–æ—Ç—Ç–∞"},
                "–ú—è—Å–Ω–∞—è": {"—Ü–µ–Ω–∞": 650, "—Ä–∞–∑–º–µ—Ä": "–ë–æ–ª—å—à–∞—è",
                           "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –ø–µ–ø–ø–µ—Ä–æ–Ω–∏, –≤–µ—Ç—á–∏–Ω–∞, –±–µ–∫–æ–Ω, –º–æ—Ü–∞—Ä–µ–ª–ª–∞"},
                "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è": {"—Ü–µ–Ω–∞": 480, "—Ä–∞–∑–º–µ—Ä": "–ë–æ–ª—å—à–∞—è",
                                   "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –ø–µ—Ä–µ—Ü, –≥—Ä–∏–±—ã, –æ–ª–∏–≤–∫–∏, –ª—É–∫, –º–æ—Ü–∞—Ä–µ–ª–ª–∞"},
                "–ö–∞—Å—Ç–æ–º–Ω–∞—è": {"—Ü–µ–Ω–∞": 400, "—Ä–∞–∑–º–µ—Ä": "–°—Ä–µ–¥–Ω—è—è", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"}
            }
            menu["–ù–∞–ø–∏—Ç–∫–∏"] = {
                "–ö–æ–ª–∞": {"—Ü–µ–Ω–∞": 150, "–æ–±—ä–µ–º": "0.5–ª"},
                "–§–∞–Ω—Ç–∞": {"—Ü–µ–Ω–∞": 150, "–æ–±—ä–µ–º": "0.5–ª"},
                "–°–ø—Ä–∞–π—Ç": {"—Ü–µ–Ω–∞": 150, "–æ–±—ä–µ–º": "0.5–ª"},
                "–í–æ–¥–∞": {"—Ü–µ–Ω–∞": 100, "–æ–±—ä–µ–º": "0.5–ª"},
                "–°–æ–∫": {"—Ü–µ–Ω–∞": 180, "–æ–±—ä–µ–º": "0.5–ª"}
            }
        else:
            menu["–ü–∏—Ü—Ü—ã"] = {
                "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": {"—Ü–µ–Ω–∞": 350, "—Ä–∞–∑–º–µ—Ä": "–°—Ä–µ–¥–Ω—è—è", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –±–∞–∑–∏–ª–∏–∫"},
                "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏": {"—Ü–µ–Ω–∞": 400, "—Ä–∞–∑–º–µ—Ä": "–°—Ä–µ–¥–Ω—è—è", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –ø–µ–ø–ø–µ—Ä–æ–Ω–∏, –º–æ—Ü–∞—Ä–µ–ª–ª–∞"},
                "–ì–∞–≤–∞–π—Å–∫–∞—è": {"—Ü–µ–Ω–∞": 380, "—Ä–∞–∑–º–µ—Ä": "–°—Ä–µ–¥–Ω—è—è",
                              "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å, –≤–µ—Ç—á–∏–Ω–∞, –∞–Ω–∞–Ω–∞—Å—ã, –º–æ—Ü–∞—Ä–µ–ª–ª–∞"},
                "–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞": {"—Ü–µ–Ω–∞": 450, "—Ä–∞–∑–º–µ—Ä": "–°—Ä–µ–¥–Ω—è—è",
                                "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞, –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–∞, –ø–∞—Ä–º–µ–∑–∞–Ω, —Ä–∏–∫–æ—Ç—Ç–∞"},
                "–ö–∞—Å—Ç–æ–º–Ω–∞—è": {"—Ü–µ–Ω–∞": 300, "—Ä–∞–∑–º–µ—Ä": "–ú–∞–ª–µ–Ω—å–∫–∞—è", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"}
            }
            menu["–ù–∞–ø–∏—Ç–∫–∏"] = {
                "–ö–æ–ª–∞": {"—Ü–µ–Ω–∞": 120, "–æ–±—ä–µ–º": "0.33–ª"},
                "–§–∞–Ω—Ç–∞": {"—Ü–µ–Ω–∞": 120, "–æ–±—ä–µ–º": "0.33–ª"},
                "–°–ø—Ä–∞–π—Ç": {"—Ü–µ–Ω–∞": 120, "–æ–±—ä–µ–º": "0.33–ª"},
                "–í–æ–¥–∞": {"—Ü–µ–Ω–∞": 80, "–æ–±—ä–µ–º": "0.33–ª"},
                "–°–æ–∫": {"—Ü–µ–Ω–∞": 150, "–æ–±—ä–µ–º": "0.33–ª"}
            }

        return menu

    def load_toppings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∏–Ω–æ–∫"""
        toppings = {}
        try:
            with open('config/toppings.txt', 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if '=' in line:
                        topping, price = line.split('=')
                        toppings[topping] = int(price)
            return toppings
        except FileNotFoundError:
            print("–§–∞–π–ª –Ω–∞—á–∏–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return self.create_default_toppings()

    def create_default_toppings(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏': 80,
            '–í–µ—Ç—á–∏–Ω–∞': 70,
            '–ë–µ–∫–æ–Ω': 90,
            '–ì—Ä–∏–±—ã': 50,
            '–ü–µ—Ä–µ—Ü': 40,
            '–õ—É–∫': 30,
            '–û–ª–∏–≤–∫–∏': 45,
            '–ê–Ω–∞–Ω–∞—Å—ã': 60,
            '–ú–∞—Å–ª–∏–Ω—ã': 45,
            '–ü–æ–º–∏–¥–æ—Ä—ã': 40,
            '–ö—É–∫—É—Ä—É–∑–∞': 35,
            '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞': 55,
            '–ü–∞—Ä–º–µ–∑–∞–Ω': 65
        }

    def save_receipt_config(self, config_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–∞"""
        try:
            config = configparser.ConfigParser()
            config['–ß–µ–∫'] = config_data['receipt']
            config['QR'] = config_data['qr']

            with open('config/receipt_config.txt', 'w', encoding='utf-8') as f:
                config.write(f)
            return True
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–∞: {e}")
            return False

    def save_menu_config(self, menu_data, menu_file):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é –≤ —Ñ–∞–π–ª"""
        try:
            config = configparser.ConfigParser()

            # –ü–∏—Ü—Ü—ã
            config['–ü–∏—Ü—Ü—ã'] = {}
            for pizza, info in menu_data["–ü–∏—Ü—Ü—ã"].items():
                config['–ü–∏—Ü—Ü—ã'][pizza.replace(' ', '_')] = f"{info['—Ü–µ–Ω–∞']}|{info['—Ä–∞–∑–º–µ—Ä']}|{info['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']}"

            # –ù–∞–ø–∏—Ç–∫–∏
            config['–ù–∞–ø–∏—Ç–∫–∏'] = {}
            for drink, info in menu_data["–ù–∞–ø–∏—Ç–∫–∏"].items():
                config['–ù–∞–ø–∏—Ç–∫–∏'][drink] = f"{info['—Ü–µ–Ω–∞']}|{info['–æ–±—ä–µ–º']}"

            with open(f'config/{menu_file}', 'w', encoding='utf-8') as f:
                config.write(f)
            return True
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–Ω—é: {e}")
            return False

    def save_toppings(self, toppings_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–æ–∫"""
        try:
            with open('config/toppings.txt', 'w', encoding='utf-8') as f:
                for topping, price in toppings_data.items():
                    f.write(f"{topping}={price}\n")
            return True
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—á–∏–Ω–æ–∫: {e}")
            return False

    def save_discounts(self, discounts_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫–∏–¥–æ–∫"""
        try:
            with open('config/discounts_config.txt', 'w', encoding='utf-8') as f:
                for volume, discount in discounts_data["–Ω–∞–ø–∏—Ç–∫–∏"].items():
                    f.write(f"{volume}={discount}\n")
            return True
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫: {e}")
            return False


class ImageManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""

    def __init__(self):
        self.image_cache = {}
        self.default_image = self.create_default_image()

    def create_default_image(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        img = Image.new('RGB', (200, 150), color='lightgray')
        return ImageTk.PhotoImage(img)

    def load_image(self, image_path, size=(200, 150)):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if image_path in self.image_cache:
                return self.image_cache[image_path]

            if os.path.exists(image_path):
                image = Image.open(image_path)
                image = image.resize(size, Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(image)
                self.image_cache[image_path] = photo
                return photo
            else:
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
                return self.default_image
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
            return self.default_image


class AnalyticsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    def __init__(self, data_manager):
        self.data_manager = data_manager

    def load_orders_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö"""
        return self.data_manager.load_orders()

    def get_popular_orders(self, top_n=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        df = self.load_orders_data()
        if df.empty:
            return []

        all_orders = []
        for orders in df['–ó–∞–∫–∞–∑']:
            if pd.notna(orders):
                items = str(orders).split('; ')
                all_orders.extend(items)

        order_counts = Counter(all_orders)
        return order_counts.most_common(top_n)

    def get_age_distribution(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º"""
        df = self.load_orders_data()
        if df.empty:
            return pd.Series()

        return df['–í–æ–∑—Ä–∞—Å—Ç'].value_counts().sort_index()

    def get_sales_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        df = self.load_orders_data()
        if df.empty:
            return {
                'total_orders': 0,
                'total_revenue': 0,
                'avg_order_value': 0,
                'most_popular_time': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            }

        total_orders = len(df)
        total_revenue = df['–°—É–º–º–∞'].sum()
        avg_order_value = df['–°—É–º–º–∞'].mean()

        return {
            'total_orders': total_orders,
            'total_revenue': total_revenue,
            'avg_order_value': avg_order_value,
            'most_popular_time': '12:00'
        }


class PizzaMakerApp(ctk.CTk):

    def __init__(self):
        super().__init__()

        self.title("Pizza Maker üçï")
        self.geometry("1200x800")
        self.resizable(True, True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.data_manager = DataManager()
        self.config_manager = ConfigManager()
        self.image_manager = ImageManager()
        self.analytics_manager = AnalyticsManager(self.data_manager)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_configuration()

        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data = {}
        self.current_order = []
        self.total_amount = 0
        self.user_comment = ""

        self.create_welcome_frame()

    def load_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            self.receipt_config = self.config_manager.load_receipt_config()
            self.images_config = self.config_manager.load_images_config()
            self.discounts_config = self.config_manager.load_discounts_config()
            self.menu_adult = self.config_manager.load_menu_config('menu_adult.txt')
            self.menu_minor = self.config_manager.load_menu_config('menu_minor.txt')
            self.toppings = self.config_manager.load_toppings()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def clear_frame(self):
        for widget in self.winfo_children():
            widget.destroy()

    def create_welcome_frame(self):
        self.clear_frame()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(self,
                                   text="üçï Pizza Maker",
                                   font=ctk.CTkFont(size=28, weight="bold"))
        title_label.pack(pady=40)

        # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        input_frame = ctk.CTkFrame(self)
        input_frame.pack(pady=20, padx=50, fill="both", expand=True)

        ctk.CTkLabel(input_frame,
                     text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                     font=ctk.CTkFont(size=20, weight="bold")).pack(pady=20)

        # –ü–æ–ª–µ –§–ò–û
        ctk.CTkLabel(input_frame, text="–§–ò–û:",
                     font=ctk.CTkFont(size=14)).pack(pady=5)
        self.fio_entry = ctk.CTkEntry(input_frame,
                                      placeholder_text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û",
                                      width=300,
                                      height=35)
        self.fio_entry.pack(pady=10)

        # –ü–æ–ª–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
        ctk.CTkLabel(input_frame, text="–í–æ–∑—Ä–∞—Å—Ç:",
                     font=ctk.CTkFont(size=14)).pack(pady=5)
        self.age_entry = ctk.CTkEntry(input_frame,
                                      placeholder_text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç",
                                      width=300,
                                      height=35)
        self.age_entry.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(input_frame)
        button_frame.pack(pady=30)

        continue_btn = ctk.CTkButton(button_frame,
                                     text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                                     command=self.process_user_info,
                                     height=40,
                                     font=ctk.CTkFont(size=16))
        continue_btn.pack(side="left", padx=10)

        settings_btn = ctk.CTkButton(button_frame,
                                     text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                     command=self.show_settings,
                                     height=40,
                                     font=ctk.CTkFont(size=16),
                                     fg_color="gray",
                                     hover_color="#4a4a4a")
        settings_btn.pack(side="left", padx=10)

    def process_user_info(self):
        fio = self.fio_entry.get().strip()
        age_text = self.age_entry.get().strip()

        if not fio:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û")
            return

        try:
            age = int(age_text)
            if age <= 0:
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞", "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
            return

        self.user_data = {"fio": fio, "age": age}
        self.create_menu_frame()

    def create_menu_frame(self):
        self.clear_frame()

        is_adult = self.user_data["age"] >= 18
        menu = self.menu_adult if is_adult else self.menu_minor
        pizza_discounts = self.discounts_config["–ø–∏—Ü—Ü—ã_–≤–∑—Ä–æ—Å–ª—ã–µ"] if is_adult else self.discounts_config[
            "–ø–∏—Ü—Ü—ã_–¥–µ—Ç—Å–∫–∏–µ"]

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        welcome_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {self.user_data['fio']}!"
        if is_adult:
            welcome_text += " –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –≤–∑—Ä–æ—Å–ª–æ–µ –º–µ–Ω—é üçï"
        else:
            welcome_text += " –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üçï"

        title_label = ctk.CTkLabel(self,
                                   text=welcome_text,
                                   font=ctk.CTkFont(size=20, weight="bold"))
        title_label.pack(pady=20)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)

        # –§—Ä–µ–π–º –º–µ–Ω—é
        menu_frame = ctk.CTkFrame(main_frame)
        menu_frame.pack(side="left",
                        padx=10,
                        pady=10,
                        fill="both",
                        expand=True)

        # –§—Ä–µ–π–º –∫–æ—Ä–∑–∏–Ω—ã
        cart_frame = ctk.CTkFrame(main_frame, width=300)
        cart_frame.pack(side="right", padx=10, pady=10, fill="y")

        # –í–∫–ª–∞–¥–∫–∏
        tabview = ctk.CTkTabview(menu_frame)
        tabview.pack(pady=10, padx=10, fill="both", expand=True)

        tab_pizzas = tabview.add("üçï –ü–∏—Ü—Ü—ã")
        tab_drinks = tabview.add("ü•§ –ù–∞–ø–∏—Ç–∫–∏")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ü—Ü —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
        for pizza, info in menu["–ü–∏—Ü—Ü—ã"].items():
            pizza_frame = ctk.CTkFrame(tab_pizzas)
            pizza_frame.pack(pady=10, padx=10, fill="x")

            # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            top_frame = ctk.CTkFrame(pizza_frame)
            top_frame.pack(fill="x", pady=5)

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã
            image_path = self.images_config["–ü–∏—Ü—Ü—ã"].get(pizza, "")
            pizza_image = self.image_manager.load_image(image_path, size=(120, 90))

            image_label = ctk.CTkLabel(top_frame, image=pizza_image, text="")
            image_label.pack(side="left", padx=10)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ü—Ü–µ
            info_frame = ctk.CTkFrame(top_frame)
            info_frame.pack(side="left", fill="x", expand=True, padx=10)

            pizza_text = f"{pizza} - {info['—Ü–µ–Ω–∞']} —Ä—É–±. ({info['—Ä–∞–∑–º–µ—Ä']})"
            ctk.CTkLabel(info_frame,
                         text=pizza_text,
                         font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w")

            ctk.CTkLabel(info_frame,
                         text=info['–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã'],
                         font=ctk.CTkFont(size=12),
                         text_color="gray").pack(anchor="w")

            # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏ –∫–Ω–æ–ø–∫–∏
            bottom_frame = ctk.CTkFrame(pizza_frame)
            bottom_frame.pack(fill="x", pady=5)

            # –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
            size_frame = ctk.CTkFrame(bottom_frame)
            size_frame.pack(side="left", padx=10)

            ctk.CTkLabel(size_frame, text="–†–∞–∑–º–µ—Ä:", font=ctk.CTkFont(size=12)).pack(side="left", padx=5)
            size_var = ctk.StringVar(value=info['—Ä–∞–∑–º–µ—Ä'])

            size_options = list(pizza_discounts.keys())
            size_menu = ctk.CTkOptionMenu(size_frame, variable=size_var, values=size_options, width=120)
            size_menu.pack(side="left", padx=5)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞
            price_label = ctk.CTkLabel(size_frame, text="", font=ctk.CTkFont(size=12, weight="bold"))
            price_label.pack(side="left", padx=10)

            def update_price(p=info['—Ü–µ–Ω–∞'], s=size_var, l=price_label, d=pizza_discounts):
                size = s.get()
                multiplier = d.get(size, 1.0)
                new_price = int(p * multiplier)
                l.configure(text=f"{new_price} —Ä—É–±.")

            size_var.trace('w', lambda *args: update_price())
            update_price()  # Initial update

            # –ö–Ω–æ–ø–∫–∏
            button_frame = ctk.CTkFrame(bottom_frame)
            button_frame.pack(side="right", padx=10)

            # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∏—Ü—Ü—ã
            comment_btn = ctk.CTkButton(button_frame,
                                        text="üí¨",
                                        command=lambda p=pizza: self.add_item_comment_dialog(p),
                                        width=40,
                                        height=30,
                                        fg_color="orange",
                                        hover_color="#cc5500")
            comment_btn.pack(side="left", padx=2)

            add_btn = ctk.CTkButton(button_frame,
                                    text="–î–æ–±–∞–≤–∏—Ç—å",
                                    command=lambda p=pizza, sz=size_var, base=info['—Ü–µ–Ω–∞'], d=pizza_discounts:
                                    self.add_pizza_with_size(p, sz, base, d),
                                    width=100)
            add_btn.pack(side="left", padx=2)

            if pizza == "–ö–∞—Å—Ç–æ–º–Ω–∞—è":
                custom_btn = ctk.CTkButton(
                    button_frame,
                    text="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é",
                    command=self.create_custom_pizza_dialog,
                    width=100,
                    fg_color="green",
                    hover_color="#006400")
                custom_btn.pack(side="left", padx=2)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –æ–±—ä–µ–º–∞ –∏ —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
        for drink, info in menu["–ù–∞–ø–∏—Ç–∫–∏"].items():
            drink_frame = ctk.CTkFrame(tab_drinks)
            drink_frame.pack(pady=10, padx=10, fill="x")

            # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            top_frame = ctk.CTkFrame(drink_frame)
            top_frame.pack(fill="x", pady=5)

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞
            image_path = self.images_config["–ù–∞–ø–∏—Ç–∫–∏"].get(drink, "")
            drink_image = self.image_manager.load_image(image_path, size=(80, 80))

            image_label = ctk.CTkLabel(top_frame, image=drink_image, text="")
            image_label.pack(side="left", padx=10)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ
            info_frame = ctk.CTkFrame(top_frame)
            info_frame.pack(side="left", fill="x", expand=True, padx=10)

            drink_text = f"{drink} - {info['—Ü–µ–Ω–∞']} —Ä—É–±. ({info['–æ–±—ä–µ–º']})"
            ctk.CTkLabel(info_frame,
                         text=drink_text,
                         font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w")

            # –í—ã–±–æ—Ä –æ–±—ä–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–∫–∏–¥–∫–∏
            volume_frame = ctk.CTkFrame(info_frame)
            volume_frame.pack(anchor="w", pady=5)

            ctk.CTkLabel(volume_frame, text="–û–±—ä–µ–º:", font=ctk.CTkFont(size=12)).pack(side="left", padx=5)
            volume_var = ctk.StringVar(value=info['–æ–±—ä–µ–º'])

            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–∫–∏–¥–∫–∏
            volume_options = []
            for volume in ["0.33–ª", "0.5–ª", "1–ª", "1.5–ª", "2–ª"]:
                discount = self.discounts_config["–Ω–∞–ø–∏—Ç–∫–∏"].get(volume, 0.0)
                if discount > 0:
                    volume_options.append(f"{volume} (-{discount}%)")
                else:
                    volume_options.append(volume)

            volume_menu = ctk.CTkOptionMenu(volume_frame, variable=volume_var, values=volume_options, width=100)
            volume_menu.pack(side="left", padx=5)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
            drink_price_label = ctk.CTkLabel(volume_frame, text="", font=ctk.CTkFont(size=12, weight="bold"))
            drink_price_label.pack(side="left", padx=10)

            def update_drink_price(p=info['—Ü–µ–Ω–∞'], v=volume_var, l=drink_price_label,
                                   d=self.discounts_config["–Ω–∞–ø–∏—Ç–∫–∏"]):
                volume_text = v.get()
                volume = volume_text.split(' ')[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–º
                discount = d.get(volume, 0.0)
                final_price = int(p * (1 - discount / 100))
                l.configure(text=f"{final_price} —Ä—É–±.")

            volume_var.trace('w', lambda *args: update_drink_price())
            update_drink_price()  # Initial update

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
            drink_button_frame = ctk.CTkFrame(drink_frame)
            drink_button_frame.pack(anchor="e", pady=5)

            # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –Ω–∞–ø–∏—Ç–∫–∞
            drink_comment_btn = ctk.CTkButton(drink_button_frame,
                                              text="üí¨",
                                              command=lambda d=drink: self.add_item_comment_dialog(d),
                                              width=40,
                                              height=30,
                                              fg_color="orange",
                                              hover_color="#cc5500")
            drink_comment_btn.pack(side="left", padx=2)

            add_btn = ctk.CTkButton(drink_button_frame,
                                    text="–î–æ–±–∞–≤–∏—Ç—å",
                                    command=lambda d=drink, price=info['—Ü–µ–Ω–∞'], vol=volume_var:
                                    self.add_drink_with_volume(d, price, vol),
                                    width=100)
            add_btn.pack(side="left", padx=2)

        # –ü–æ–ª–µ –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É
        comment_frame = ctk.CTkFrame(menu_frame)
        comment_frame.pack(pady=10, padx=10, fill="x")

        comment_btn = ctk.CTkButton(comment_frame,
                                    text="üí¨ –î–æ–±–∞–≤–∏—Ç—å –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É",
                                    command=self.add_general_comment_dialog,
                                    height=35,
                                    fg_color="blue",
                                    hover_color="#00008b")
        comment_btn.pack(pady=5)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        self.comment_label = ctk.CTkLabel(comment_frame,
                                          text="",
                                          font=ctk.CTkFont(size=12),
                                          text_color="gray",
                                          wraplength=400)
        self.comment_label.pack(pady=5)

        if self.user_comment:
            self.comment_label.configure(text=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self.user_comment}")

        # –ö–æ—Ä–∑–∏–Ω–∞
        ctk.CTkLabel(cart_frame,
                     text="üõí –í–∞—à –∑–∞–∫–∞–∑",
                     font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)

        self.cart_textbox = ctk.CTkTextbox(cart_frame, height=300, width=280)
        self.cart_textbox.pack(pady=10, padx=10, fill="both", expand=True)

        self.update_cart_display()

        ctk.CTkLabel(cart_frame,
                     text=f"–ò—Ç–æ–≥–æ: {self.total_amount} —Ä—É–±.",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=5)

        checkout_btn = ctk.CTkButton(cart_frame,
                                     text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
                                     command=self.checkout,
                                     height=40,
                                     font=ctk.CTkFont(size=16))
        checkout_btn.pack(pady=10)

        clear_btn = ctk.CTkButton(cart_frame,
                                  text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                                  command=self.clear_cart,
                                  height=30,
                                  fg_color="gray",
                                  hover_color="#4a4a4a")
        clear_btn.pack(pady=5)

    def add_item_comment_dialog(self, item_name):
        """–î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É"""
        dialog = ctk.CTkToplevel(self)
        dialog.title(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ {item_name}")
        dialog.geometry("400x250")
        dialog.resizable(False, False)

        ctk.CTkLabel(dialog,
                     text=f"–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ {item_name}:",
                     font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)

        comment_text = scrolledtext.ScrolledText(dialog, width=40, height=6, font=("Arial", 12))
        comment_text.pack(pady=10, padx=20, fill="both", expand=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        existing_comment = ""
        for order_item in self.current_order:
            if order_item['item'].startswith(item_name) and 'comment' in order_item:
                existing_comment = order_item['comment']
                break

        comment_text.insert("1.0", existing_comment)

        def save_comment():
            comment = comment_text.get("1.0", "end-1c").strip()

            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            for order_item in self.current_order:
                if order_item['item'].startswith(item_name):
                    if comment:
                        order_item['comment'] = comment
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                        order_item['item'] = f"{item_name.split('(')[0].strip()} ({order_item['item'].split('(')[1]} üí¨"
                    else:
                        # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
                        if 'comment' in order_item:
                            del order_item['comment']
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        if 'üí¨' in order_item['item']:
                            order_item['item'] = order_item['item'].replace('üí¨', '').strip()

                    self.update_cart_display()
                    break

            dialog.destroy()
            if comment:
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ {item_name}")

        button_frame = ctk.CTkFrame(dialog)
        button_frame.pack(pady=10)

        ctk.CTkButton(button_frame,
                      text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_comment,
                      height=35).pack(side="left", padx=5)

        ctk.CTkButton(button_frame,
                      text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      height=35,
                      fg_color="gray").pack(side="left", padx=5)

    def add_general_comment_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É")
        dialog.geometry("500x300")
        dialog.resizable(False, False)

        ctk.CTkLabel(dialog,
                     text="–í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:",
                     font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)

        comment_text = scrolledtext.ScrolledText(dialog, width=50, height=10, font=("Arial", 12))
        comment_text.pack(pady=10, padx=20, fill="both", expand=True)
        comment_text.insert("1.0", self.user_comment)

        def save_comment():
            self.user_comment = comment_text.get("1.0", "end-1c").strip()
            if self.user_comment:
                self.comment_label.configure(text=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self.user_comment}")
            else:
                self.comment_label.configure(text="")
            dialog.destroy()

        ctk.CTkButton(dialog,
                      text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_comment,
                      height=40).pack(pady=10)

    def add_pizza_with_size(self, pizza, size_var, base_price, discounts):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        size = size_var.get()
        multiplier = discounts.get(size, 1.0)
        price = int(base_price * multiplier)
        item_name = f"{pizza} ({size})"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–∏—Ü—Ü–∞ –≤ –∑–∞–∫–∞–∑–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        for order_item in self.current_order:
            if order_item['item'].startswith(pizza) and 'comment' in order_item:
                item_name = f"{pizza} ({size}) üí¨"
                order_item['item'] = item_name
                order_item['price'] = price
                self.total_amount = sum(item['price'] for item in self.current_order)
                self.update_cart_display()
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"{pizza} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ!")
                return

        # –ï—Å–ª–∏ –ø–∏—Ü—Ü—ã –µ—â–µ –Ω–µ—Ç –≤ –∑–∞–∫–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        self.current_order.append({"item": item_name, "price": price, "quantity": 1})
        self.total_amount += price
        self.update_cart_display()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{item_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    def add_drink_with_volume(self, drink, base_price, volume_var):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º –∏ —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏"""
        volume_text = volume_var.get()
        volume = volume_text.split(' ')[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–º

        discount = self.discounts_config["–Ω–∞–ø–∏—Ç–∫–∏"].get(volume, 0.0)
        final_price = int(base_price * (1 - discount / 100))

        item_name = f"{drink} ({volume})"
        if discount > 0:
            item_name += f" [–°–ö–ò–î–ö–ê {discount}%]"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–∞–ø–∏—Ç–æ–∫ –≤ –∑–∞–∫–∞–∑–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        for order_item in self.current_order:
            if order_item['item'].startswith(drink) and 'comment' in order_item:
                item_name = f"{drink} ({volume}) üí¨"
                if discount > 0:
                    item_name += f" [–°–ö–ò–î–ö–ê {discount}%]"
                order_item['item'] = item_name
                order_item['price'] = final_price
                self.total_amount = sum(item['price'] for item in self.current_order)
                self.update_cart_display()
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"{drink} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ!")
                return

        # –ï—Å–ª–∏ –Ω–∞–ø–∏—Ç–∫–∞ –µ—â–µ –Ω–µ—Ç –≤ –∑–∞–∫–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        self.current_order.append({"item": item_name, "price": final_price, "quantity": 1})
        self.total_amount += final_price
        self.update_cart_display()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"{item_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    def update_cart_display(self):
        self.cart_textbox.delete("1.0", "end")
        if not self.current_order:
            self.cart_textbox.insert("1.0", "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        for i, order_item in enumerate(self.current_order, 1):
            item_text = f"{i}. {order_item['item']} - {order_item['price']} —Ä—É–±."
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'comment' in order_item:
                item_text += f"\n   üí¨ {order_item['comment']}"
            self.cart_textbox.insert("end", item_text + "\n\n")

    def clear_cart(self):
        self.current_order = []
        self.total_amount = 0
        self.user_comment = ""
        self.comment_label.configure(text="")
        self.update_cart_display()

    def create_custom_pizza_dialog(self):
        dialog = ctk.CTkToplevel(self)
        dialog.title("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–∏—Ü—Ü—ã")
        dialog.geometry("500x600")
        dialog.resizable(False, False)

        is_adult = self.user_data["age"] >= 18
        base_price = 400 if is_adult else 300
        selected_toppings = []
        current_price = base_price

        def update_price():
            nonlocal current_price
            current_price = base_price + sum(self.toppings[top]
                                             for top in selected_toppings)
            price_label.configure(
                text=f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_price} —Ä—É–±.")

        ctk.CTkLabel(dialog,
                     text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫–∏:",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        price_label = ctk.CTkLabel(
            dialog,
            text=f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_price} —Ä—É–±.",
            font=ctk.CTkFont(size=14))
        price_label.pack(pady=5)

        scroll_frame = ctk.CTkScrollableFrame(dialog)
        scroll_frame.pack(pady=10, padx=20, fill="both", expand=True)

        topping_vars = {}

        for topping, price in self.toppings.items():
            frame = ctk.CTkFrame(scroll_frame)
            frame.pack(pady=2, fill="x")

            var = ctk.BooleanVar()
            topping_vars[topping] = var

            def make_callback(t):

                def callback():
                    if var.get():
                        if t not in selected_toppings:
                            selected_toppings.append(t)
                    else:
                        if t in selected_toppings:
                            selected_toppings.remove(t)
                    update_price()

                return callback

            chk = ctk.CTkCheckBox(frame,
                                  text=f"{topping} (+{price} —Ä—É–±.)",
                                  variable=var,
                                  command=make_callback(topping))
            chk.pack(side="left", padx=10, pady=5)

        def add_custom_pizza():
            if not selected_toppings:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                       "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–∞—á–∏–Ω–∫—É!")
                return

            description = f"–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–∏—Ü—Ü–∞ —Å: {', '.join(selected_toppings)}"
            self.current_order.append({
                "item": description,
                "price": current_price
            })
            self.total_amount += current_price
            self.update_cart_display()
            dialog.destroy()
            messagebox.showinfo("–£—Å–ø–µ—Ö",
                                "–ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–∏—Ü—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

        ctk.CTkButton(dialog,
                      text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                      command=add_custom_pizza,
                      height=40).pack(pady=20)

    def checkout(self):
        if not self.current_order:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return

        self.create_payment_frame()

    def create_payment_frame(self):
        self.clear_frame()

        title_label = ctk.CTkLabel(self,
                                   text="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                                   font=ctk.CTkFont(size=24, weight="bold"))
        title_label.pack(pady=20)

        order_frame = ctk.CTkFrame(self)
        order_frame.pack(pady=10, padx=50, fill="x")

        ctk.CTkLabel(order_frame,
                     text="–í–∞—à –∑–∞–∫–∞–∑:",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        order_text = ctk.CTkTextbox(order_frame, height=150)
        order_text.pack(pady=10, padx=10, fill="x")

        for item in self.current_order:
            order_text.insert("end",
                              f"‚Ä¢ {item['item']} - {item['price']} —Ä—É–±.\n")
            if 'comment' in item:
                order_text.insert("end", f"   üí¨ {item['comment']}\n")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.user_comment:
            order_text.insert("end", f"\nüìù –û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self.user_comment}\n")

        order_text.configure(state="disabled")

        ctk.CTkLabel(order_frame,
                     text=f"–ò—Ç–æ–≥–æ: {self.total_amount} —Ä—É–±.",
                     font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)

        payment_frame = ctk.CTkFrame(self)
        payment_frame.pack(pady=20, padx=50, fill="x")

        ctk.CTkLabel(payment_frame,
                     text="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        self.payment_var = ctk.StringVar(value="card")

        card_btn = ctk.CTkRadioButton(payment_frame,
                                      text="üí≥ –ö–∞—Ä—Ç–∞ (–±–µ–∑ —Å–¥–∞—á–∏)",
                                      variable=self.payment_var,
                                      value="card")
        card_btn.pack(pady=5)

        cash_btn = ctk.CTkRadioButton(payment_frame,
                                      text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ",
                                      variable=self.payment_var,
                                      value="cash")
        cash_btn.pack(pady=5)

        self.cash_frame = ctk.CTkFrame(payment_frame)

        ctk.CTkLabel(self.cash_frame, text="–í–Ω–µ—Å–µ–Ω–Ω–∞—è —Å—É–º–º–∞:").pack(pady=5)
        self.cash_entry = ctk.CTkEntry(self.cash_frame,
                                       placeholder_text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        self.cash_entry.pack(pady=5)

        def on_payment_change():
            if self.payment_var.get() == "cash":
                self.cash_frame.pack(pady=10)
            else:
                self.cash_frame.pack_forget()

        card_btn.configure(command=on_payment_change)
        cash_btn.configure(command=on_payment_change)

        button_frame = ctk.CTkFrame(self)
        button_frame.pack(pady=20)

        ctk.CTkButton(button_frame,
                      text="–ù–∞–∑–∞–¥",
                      command=self.create_menu_frame,
                      width=120,
                      height=40).pack(side="left", padx=10)

        ctk.CTkButton(button_frame,
                      text="–û–ø–ª–∞—Ç–∏—Ç—å",
                      command=self.process_payment,
                      width=120,
                      height=40,
                      fg_color="green",
                      hover_color="#006400").pack(side="left", padx=10)

    def process_payment(self):
        payment_method = self.payment_var.get()
        change = 0

        if payment_method == "cash":
            try:
                cash_amount = int(self.cash_entry.get())
                if cash_amount < self.total_amount:
                    messagebox.showerror(
                        "–û—à–∏–±–∫–∞",
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ –µ—â–µ {self.total_amount - cash_amount} —Ä—É–±."
                    )
                    return
                change = cash_amount - self.total_amount
                payment_text = "–ù–∞–ª–∏—á–Ω—ã–µ"
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
                return
        else:
            payment_text = "–ö–∞—Ä—Ç–∞"

        receipt_id = self.generate_receipt(payment_text, change)
        self.show_receipt_frame(receipt_id, payment_text, change)

    def generate_receipt(self, payment_method, change):
        receipt_id = datetime.now().strftime("%Y%m%d%H%M%S")
        order_items = []

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        for item in self.current_order:
            item_info = item['item']
            if 'comment' in item:
                item_info += f" (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {item['comment']})"
            order_items.append(item_info)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
        order_data = {
            'ID': receipt_id,
            '–î–∞—Ç–∞': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
            '–§–ò–û': self.user_data["fio"],
            '–í–æ–∑—Ä–∞—Å—Ç': self.user_data["age"],
            '–ó–∞–∫–∞–∑': '; '.join(order_items),
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': self.user_comment,
            '–°—É–º–º–∞': self.total_amount,
            '–û–ø–ª–∞—Ç–∞': payment_method,
            '–°–¥–∞—á–∞': change
        }

        if self.data_manager.add_order(order_data):
            print("–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Excel")
        else:
            print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        order_item_names = [item['item'] for item in self.current_order]
        self.data_manager.update_inventory(order_item_names)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        self.generate_qr_code(receipt_id)

        return receipt_id

    def generate_qr_code(self, receipt_id):
        try:
            qr_link = self.receipt_config['QR']['–°—Å—ã–ª–∫–∞']
            qr_data = f"–ß–µ–∫ ‚Ññ: {receipt_id}\n"
            qr_data += f"–°—É–º–º–∞: {self.total_amount} —Ä—É–±.\n"
            qr_data += f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            qr_data += f"–°–∞–π—Ç: {qr_link}"

            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(qr_data)
            qr.make(fit=True)

            img = qr.make_image(fill_color="black", back_color="white")
            if not os.path.exists('qrcodes'):
                os.makedirs('qrcodes')
            img.save(f"qrcodes/receipt_{receipt_id}.png")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")

    def generate_pdf_receipt(self, receipt_id, payment_method, change):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –ø–æ –§–ó-54"""
        try:
            pdf_filename = f"receipt_{receipt_id}.pdf"
            if not os.path.exists('receipts'):
                os.makedirs('receipts')
            pdf_path = os.path.join('receipts', pdf_filename)

            c = canvas.Canvas(pdf_path, pagesize=letter)
            width, height = letter

            company_name = self.receipt_config['–ß–µ–∫']['–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏']
            inn = self.receipt_config['–ß–µ–∫']['–ò–ù–ù']
            address = self.receipt_config['–ß–µ–∫']['–ê–¥—Ä–µ—Å']
            vat_rate = self.receipt_config['–ß–µ–∫']['–ù–î–°']

            y_position = height - 80

            # –ö–ê–°–°–û–í–´–ô –ß–ï–ö (–§–ó-54)
            c.setFont("Helvetica-Bold", 14)
            c.drawCentredString(width / 2, y_position, "–ö–ê–°–°–û–í–´–ô –ß–ï–ö")
            y_position -= 30

            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
            c.setFont("Helvetica-Bold", 11)
            c.drawString(100, y_position, company_name)
            y_position -= 18

            c.setFont("Helvetica", 9)
            c.drawString(100, y_position, f"–ò–ù–ù: {inn}")
            y_position -= 15
            c.drawString(100, y_position, f"–ê–¥—Ä–µ—Å: {address}")
            y_position -= 15
            c.drawString(100, y_position, "–°–ù–û: –£–°–ù")
            y_position -= 25

            # –õ–∏–Ω–∏—è
            c.line(80, y_position, width - 80, y_position)
            y_position -= 20

            # –î–∞—Ç–∞ –∏ —Å–º–µ–Ω–∞
            c.setFont("Helvetica", 9)
            receipt_date = datetime.now()
            c.drawString(100, y_position, f"–î–∞—Ç–∞: {receipt_date.strftime('%d.%m.%Y %H:%M:%S')}")
            y_position -= 15
            c.drawString(100, y_position, f"–ö–∞—Å—Å–∏—Ä: {self.user_data.get('fio', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')}")
            y_position -= 15
            c.drawString(100, y_position, f"–°–º–µ–Ω–∞ ‚Ññ: 1")
            y_position -= 15
            c.drawString(100, y_position, f"–ß–µ–∫ ‚Ññ: {receipt_id}")
            y_position -= 25

            # –õ–∏–Ω–∏—è
            c.line(80, y_position, width - 80, y_position)
            y_position -= 20

            # –¢–û–í–ê–†–´
            c.setFont("Helvetica-Bold", 10)
            c.drawString(100, y_position, "–¢–û–í–ê–†–´:")
            y_position -= 18

            c.setFont("Helvetica", 8)
            vat_amount = 0
            for item in self.current_order:
                item_name = item['item']
                quantity = item.get('quantity', 1)
                price = item['price']
                total = price * quantity
                item_vat = int(total * 20 / 120)
                vat_amount += item_vat

                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                c.drawString(100, y_position, item_name)
                y_position -= 12

                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ–≤–∞—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'comment' in item:
                    c.drawString(110, y_position, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {item['comment']}")
                    y_position -= 12

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ x –¶–µ–Ω–∞ = –°—É–º–º–∞
                c.drawString(110, y_position, f"{quantity} x {price}.00 = {total}.00")
                y_position -= 12
                # –ù–î–° 20%
                c.drawString(110, y_position, f"–ù–î–° 20%: {item_vat}.00")
                y_position -= 18

            # –û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.user_comment:
                y_position -= 10
                c.setFont("Helvetica-Bold", 9)
                c.drawString(100, y_position, "–û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞:")
                y_position -= 12
                c.setFont("Helvetica", 8)
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                comment_lines = []
                words = self.user_comment.split()
                current_line = ""
                for word in words:
                    if len(current_line + word) <= 50:
                        current_line += word + " "
                    else:
                        comment_lines.append(current_line)
                        current_line = word + " "
                if current_line:
                    comment_lines.append(current_line)

                for line in comment_lines:
                    c.drawString(100, y_position, line)
                    y_position -= 12

            # –õ–∏–Ω–∏—è
            c.line(80, y_position, width - 80, y_position)
            y_position -= 20

            # –ò–¢–û–ì–û
            c.setFont("Helvetica-Bold", 11)
            c.drawString(100, y_position, f"–ò–¢–û–ì–û: {self.total_amount}.00 —Ä—É–±")
            y_position -= 18

            # –ù–î–°
            c.setFont("Helvetica", 9)
            c.drawString(100, y_position, f"–≤ —Ç.—á. –ù–î–° 20%: {vat_amount}.00 —Ä—É–±")
            y_position -= 20

            # –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã
            c.setFont("Helvetica-Bold", 9)
            if payment_method == "–ù–∞–ª–∏—á–Ω—ã–µ":
                c.drawString(100, y_position, f"–ù–ê–õ–ò–ß–ù–´–ú–ò: {self.total_amount}.00 —Ä—É–±")
                y_position -= 15
                if change > 0:
                    c.drawString(100, y_position, f"–°–¥–∞—á–∞: {change}.00 —Ä—É–±")
                    y_position -= 15
            else:
                c.drawString(100, y_position, f"–ë–ï–ó–ù–ê–õ–ò–ß–ù–´–ú–ò: {self.total_amount}.00 —Ä—É–±")
                y_position -= 15

            y_position -= 10
            c.line(80, y_position, width - 80, y_position)
            y_position -= 20

            # –§–∏—Å–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            c.setFont("Helvetica", 8)
            c.drawString(100, y_position, f"–†–ù –ö–ö–¢: 0000{inn[:10]}")
            y_position -= 12
            c.drawString(100, y_position, f"–ó–ù –ö–ö–¢: 00000000{inn[:6]}")
            y_position -= 12
            c.drawString(100, y_position, f"–§–ù: 9999{inn[:8]}")
            y_position -= 12
            c.drawString(100, y_position, f"–§–î: {receipt_id}")
            y_position -= 12
            fiscal_sign = int(receipt_id[-8:]) if len(receipt_id) >= 8 else int(receipt_id)
            c.drawString(100, y_position, f"–§–ü: {fiscal_sign}")
            y_position -= 20

            # QR-–∫–æ–¥
            qr_image_path = f"qrcodes/receipt_{receipt_id}.png"
            if os.path.exists(qr_image_path):
                c.drawImage(qr_image_path, 180, 50, width=150, height=150)

            c.save()
            return pdf_path

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            return None

    def show_receipt_frame(self, receipt_id, payment_method, change):
        self.clear_frame()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —á–µ–∫–∞
        pdf_file = self.generate_pdf_receipt(receipt_id, payment_method, change)

        title_label = ctk.CTkLabel(self,
                                   text="–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ",
                                   font=ctk.CTkFont(size=24, weight="bold"))
        title_label.pack(pady=20)

        receipt_frame = ctk.CTkFrame(self)
        receipt_frame.pack(pady=10, padx=50, fill="both", expand=True)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        company_name = self.receipt_config['–ß–µ–∫']['–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏']
        inn = self.receipt_config['–ß–µ–∫']['–ò–ù–ù']
        address = self.receipt_config['–ß–µ–∫']['–ê–¥—Ä–µ—Å']
        phone = self.receipt_config['–ß–µ–∫']['–¢–µ–ª–µ—Ñ–æ–Ω']
        vat = self.receipt_config['–ß–µ–∫']['–ù–î–°']

        receipt_text = f"""{company_name}
–ò–ù–ù: {inn}
–ê–¥—Ä–µ—Å: {address}
–¢–µ–ª–µ—Ñ–æ–Ω: {phone}

–ß–ï–ö ‚Ññ: {receipt_id}
–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
–ö–ª–∏–µ–Ω—Ç: {self.user_data['fio']}
–í–æ–∑—Ä–∞—Å—Ç: {self.user_data['age']}

–ó–ê–ö–ê–ó:
"""
        for item in self.current_order:
            receipt_text += f"‚Ä¢ {item['item']} - {item['price']} —Ä—É–±.\n"
            if 'comment' in item:
                receipt_text += f"  üí¨ {item['comment']}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.user_comment:
            receipt_text += f"\nüìù –û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self.user_comment}\n"

        receipt_text += f"\n–ò–¢–û–ì–û: {self.total_amount} —Ä—É–±."
        receipt_text += f"\n–ù–î–°: {vat}"
        receipt_text += f"\n–û–ø–ª–∞—Ç–∞: {payment_method}"

        if payment_method == "–ù–∞–ª–∏—á–Ω—ã–µ":
            receipt_text += f"\n–í–Ω–µ—Å–µ–Ω–æ: {self.total_amount + change} —Ä—É–±."
            receipt_text += f"\n–°–¥–∞—á–∞: {change} —Ä—É–±."

        receipt_text += f"\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üçï"
        receipt_text += f"\n\nPDF —á–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_file}"

        receipt_display = ctk.CTkTextbox(receipt_frame,
                                         font=ctk.CTkFont(family="Courier", size=12))
        receipt_display.pack(pady=20, padx=20, fill="both", expand=True)
        receipt_display.insert("1.0", receipt_text)
        receipt_display.configure(state="disabled")

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —á–µ–∫–∞
        receipt_actions_frame = ctk.CTkFrame(self)
        receipt_actions_frame.pack(pady=10)

        ctk.CTkLabel(receipt_actions_frame,
                     text="–î–µ–π—Å—Ç–≤–∏—è —Å —á–µ–∫–æ–º:",
                     font=ctk.CTkFont(size=14, weight="bold")).pack(pady=5)

        receipt_btns_frame = ctk.CTkFrame(receipt_actions_frame)
        receipt_btns_frame.pack(pady=5)

        ctk.CTkButton(receipt_btns_frame,
                      text="üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                      command=lambda: self.send_receipt(pdf_file),
                      width=120,
                      height=35,
                      fg_color="blue",
                      hover_color="#00008b").pack(side="left", padx=5)

        ctk.CTkButton(receipt_btns_frame,
                      text="üíæ –°–∫–∞—á–∞—Ç—å PDF",
                      command=lambda: self.download_receipt(pdf_file),
                      width=120,
                      height=35,
                      fg_color="purple",
                      hover_color="#4b0082").pack(side="left", padx=5)

        ctk.CTkButton(receipt_btns_frame,
                      text="üñ®Ô∏è –ü–µ—á–∞—Ç—å",
                      command=lambda: self.print_receipt(pdf_file),
                      width=120,
                      height=35,
                      fg_color="orange",
                      hover_color="#cc5500").pack(side="left", padx=5)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(self)
        button_frame.pack(pady=20)

        ctk.CTkButton(button_frame,
                      text="–ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
                      command=self.restart_app,
                      width=150,
                      height=40,
                      fg_color="green",
                      hover_color="#006400").pack(side="left", padx=10)

        ctk.CTkButton(button_frame,
                      text="–í—ã—Ö–æ–¥",
                      command=self.quit,
                      width=150,
                      height=40,
                      fg_color="red",
                      hover_color="#8b0000").pack(side="left", padx=10)

    def send_receipt(self, pdf_file):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –ø–æ email"""
        email = simpledialog.askstring("–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞", "–í–≤–µ–¥–∏—Ç–µ email:")
        if email:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}\n(–î–µ–º–æ: —Ñ—É–Ω–∫—Ü–∏—è email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)")

    def download_receipt(self, pdf_file):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–∫–∞"""
        if pdf_file and os.path.exists(pdf_file):
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"PDF —á–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_file}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def print_receipt(self, pdf_file):
        """–ü–µ—á–∞—Ç—å —á–µ–∫–∞"""
        if pdf_file and os.path.exists(pdf_file):
            try:
                if os.name == 'posix':  # Linux/Mac
                    os.system(f"lpr {pdf_file}")
                elif os.name == 'nt':  # Windows
                    os.startfile(pdf_file, "print")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å!")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def show_settings(self):
        """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∑–∞—â–∏—Ç–æ–π –ø–∞—Ä–æ–ª–µ–º"""
        password = simpledialog.askstring("–í—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                                          "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                                          show='*')
        if password == "123":
            SettingsWindow(self)
        elif password is not None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

    def restart_app(self):
        self.user_data = {}
        self.current_order = []
        self.total_amount = 0
        self.user_comment = ""
        self.load_configuration()
        self.create_welcome_frame()


# –ö–ª–∞—Å—Å SettingsWindow –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ)
class SettingsWindow(ctk.CTkToplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.config_manager = parent.config_manager

        self.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Pizza Maker")
        self.geometry("900x700")
        self.resizable(True, True)

        self.create_widgets()
        self.load_current_settings()

    def create_widgets(self):
        # –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        tabview = ctk.CTkTabview(self)
        tabview.pack(pady=10, padx=10, fill="both", expand=True)

        tab_receipt = tabview.add("–ß–µ–∫")
        tab_menu_adult = tabview.add("–ú–µ–Ω—é –í–∑—Ä–æ—Å–ª–æ–µ")
        tab_menu_minor = tabview.add("–ú–µ–Ω—é –î–µ—Ç—Å–∫–æ–µ")
        tab_toppings = tabview.add("–ù–∞—á–∏–Ω–∫–∏")
        tab_discounts = tabview.add("–°–∫–∏–¥–∫–∏")
        tab_analytics = tabview.add("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")

        self.create_receipt_tab(tab_receipt)
        self.create_menu_tab(tab_menu_adult, "adult")
        self.create_menu_tab(tab_menu_minor, "minor")
        self.create_toppings_tab(tab_toppings)
        self.create_discounts_tab(tab_discounts)
        self.create_analytics_tab(tab_analytics)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(self)
        button_frame.pack(pady=10)

        ctk.CTkButton(button_frame,
                      text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=self.save_all_settings,
                      width=120,
                      height=40).pack(side="left", padx=10)

        ctk.CTkButton(button_frame,
                      text="–û—Ç–º–µ–Ω–∞",
                      command=self.destroy,
                      width=120,
                      height=40,
                      fg_color="gray",
                      hover_color="#4a4a4a").pack(side="left", padx=10)

    def create_receipt_tab(self, parent):
        scroll_frame = ctk.CTkScrollableFrame(parent)
        scroll_frame.pack(pady=10, padx=10, fill="both", expand=True)

        self.receipt_entries = {}
        fields = [("–ù–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"), ("–ò–ù–ù", "–ò–ù–ù"),
                  ("–ê–¥—Ä–µ—Å", "–ê–¥—Ä–µ—Å"), ("–¢–µ–ª–µ—Ñ–æ–Ω", "–¢–µ–ª–µ—Ñ–æ–Ω"), ("–°–∞–π—Ç", "–°–∞–π—Ç"),
                  ("–ù–î–°", "–ù–î–° (%)")]

        for key, label in fields:
            ctk.CTkLabel(scroll_frame,
                         text=label,
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                               pady=(10, 5))
            entry = ctk.CTkEntry(scroll_frame, width=400)
            entry.pack(anchor="w", fill="x", pady=(0, 10))
            self.receipt_entries[key] = entry

        ctk.CTkLabel(scroll_frame,
                     text="QR –°—Å—ã–ª–∫–∞",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w",
                                                           pady=(10, 5))
        self.qr_entry = ctk.CTkEntry(scroll_frame, width=400)
        self.qr_entry.pack(anchor="w", fill="x", pady=(0, 10))

    def create_menu_tab(self, parent, menu_type):
        scroll_frame = ctk.CTkScrollableFrame(parent)
        scroll_frame.pack(pady=10, padx=10, fill="both", expand=True)

        if menu_type == "adult":
            menu_data = self.parent.menu_adult
            self.menu_adult_entries = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
            current_entries = self.menu_adult_entries
        else:
            menu_data = self.parent.menu_minor
            self.menu_minor_entries = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
            current_entries = self.menu_minor_entries

        # –ü–∏—Ü—Ü—ã
        ctk.CTkLabel(scroll_frame,
                     text="–ü–ò–¶–¶–´",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(10, 5))

        for pizza, info in menu_data["–ü–∏—Ü—Ü—ã"].items():
            pizza_frame = ctk.CTkFrame(scroll_frame)
            pizza_frame.pack(fill="x", pady=5)

            ctk.CTkLabel(pizza_frame,
                         text=pizza,
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w")

            entry_frame = ctk.CTkFrame(pizza_frame)
            entry_frame.pack(fill="x", pady=5)

            ctk.CTkLabel(entry_frame, text="–¶–µ–Ω–∞:").pack(side="left", padx=5)
            price_entry = ctk.CTkEntry(entry_frame, width=80)
            price_entry.insert(0, str(info["—Ü–µ–Ω–∞"]))
            price_entry.pack(side="left", padx=5)

            ctk.CTkLabel(entry_frame, text="–†–∞–∑–º–µ—Ä:").pack(side="left", padx=5)
            size_entry = ctk.CTkEntry(entry_frame, width=100)
            size_entry.insert(0, info["—Ä–∞–∑–º–µ—Ä"])
            size_entry.pack(side="left", padx=5)

            ctk.CTkLabel(entry_frame, text="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:").pack(side="left", padx=5)
            ingredients_entry = ctk.CTkEntry(entry_frame, width=200)
            ingredients_entry.insert(0, info["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"])
            ingredients_entry.pack(side="left", padx=5)

            current_entries["–ü–∏—Ü—Ü—ã"][pizza] = {
                "—Ü–µ–Ω–∞": price_entry,
                "—Ä–∞–∑–º–µ—Ä": size_entry,
                "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": ingredients_entry
            }

        # –ù–∞–ø–∏—Ç–∫–∏
        ctk.CTkLabel(scroll_frame,
                     text="–ù–ê–ü–ò–¢–ö–ò",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(20, 5))

        for drink, info in menu_data["–ù–∞–ø–∏—Ç–∫–∏"].items():
            drink_frame = ctk.CTkFrame(scroll_frame)
            drink_frame.pack(fill="x", pady=5)

            ctk.CTkLabel(drink_frame,
                         text=drink,
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w")

            entry_frame = ctk.CTkFrame(drink_frame)
            entry_frame.pack(fill="x", pady=5)

            ctk.CTkLabel(entry_frame, text="–¶–µ–Ω–∞:").pack(side="left", padx=5)
            price_entry = ctk.CTkEntry(entry_frame, width=80)
            price_entry.insert(0, str(info["—Ü–µ–Ω–∞"]))
            price_entry.pack(side="left", padx=5)

            ctk.CTkLabel(entry_frame, text="–û–±—ä–µ–º:").pack(side="left", padx=5)
            volume_entry = ctk.CTkEntry(entry_frame, width=100)
            volume_entry.insert(0, info["–æ–±—ä–µ–º"])
            volume_entry.pack(side="left", padx=5)

            current_entries["–ù–∞–ø–∏—Ç–∫–∏"][drink] = {
                "—Ü–µ–Ω–∞": price_entry,
                "–æ–±—ä–µ–º": volume_entry
            }

    def create_toppings_tab(self, parent):
        scroll_frame = ctk.CTkScrollableFrame(parent)
        scroll_frame.pack(pady=10, padx=10, fill="both", expand=True)

        self.topping_entries = {}

        for topping, price in self.parent.toppings.items():
            frame = ctk.CTkFrame(scroll_frame)
            frame.pack(fill="x", pady=2)

            ctk.CTkLabel(frame, text=topping, width=150).pack(side="left", padx=10)
            price_entry = ctk.CTkEntry(frame, width=100)
            price_entry.insert(0, str(price))
            price_entry.pack(side="left", padx=10)

            self.topping_entries[topping] = price_entry

    def create_discounts_tab(self, parent):
        scroll_frame = ctk.CTkScrollableFrame(parent)
        scroll_frame.pack(pady=10, padx=10, fill="both", expand=True)

        self.discount_entries = {}

        ctk.CTkLabel(scroll_frame,
                     text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–∏–¥–æ–∫ –¥–ª—è –æ–±—ä–µ–º–æ–≤ –Ω–∞–ø–∏—Ç–∫–æ–≤",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=10)

        ctk.CTkLabel(scroll_frame,
                     text="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–º–∞:",
                     font=ctk.CTkFont(size=12)).pack(anchor="w", pady=5)

        volumes = ["0.33–ª", "0.5–ª", "1–ª", "1.5–ª", "2–ª"]

        for volume in volumes:
            frame = ctk.CTkFrame(scroll_frame)
            frame.pack(fill="x", pady=2)

            ctk.CTkLabel(frame, text=volume, width=100).pack(side="left", padx=10)
            discount_entry = ctk.CTkEntry(frame, width=100, placeholder_text="0.0")
            discount_entry.insert(0, str(self.parent.discounts_config["–Ω–∞–ø–∏—Ç–∫–∏"].get(volume, 0.0)))
            discount_entry.pack(side="left", padx=10)
            ctk.CTkLabel(frame, text="%").pack(side="left", padx=5)

            self.discount_entries[volume] = discount_entry

    def create_analytics_tab(self, parent):
        scroll_frame = ctk.CTkScrollableFrame(parent)
        scroll_frame.pack(pady=10, padx=10, fill="both", expand=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self.parent.analytics_manager.get_sales_statistics()

        stats_frame = ctk.CTkFrame(scroll_frame)
        stats_frame.pack(fill="x", pady=10, padx=10)

        ctk.CTkLabel(stats_frame,
                     text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        stats_text = f"""
        –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}
        –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats['total_revenue']:.2f} —Ä—É–±.
        –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_order_value']:.2f} —Ä—É–±.
        –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {stats['most_popular_time']}
        """

        stats_label = ctk.CTkLabel(stats_frame, text=stats_text, justify="left")
        stats_label.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        graphs_frame = ctk.CTkFrame(scroll_frame)
        graphs_frame.pack(fill="x", pady=10, padx=10)

        ctk.CTkLabel(graphs_frame,
                     text="–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        ctk.CTkButton(graphs_frame,
                      text="üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã",
                      command=self.show_popular_orders_chart,
                      width=200).pack(pady=5)

        ctk.CTkButton(graphs_frame,
                      text="üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º",
                      command=self.show_age_distribution_chart,
                      width=200).pack(pady=5)

        ctk.CTkButton(graphs_frame,
                      text="üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
                      command=self.show_sales_chart,
                      width=200).pack(pady=5)

    def show_popular_orders_chart(self):
        """–ì—Ä–∞—Ñ–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        popular_orders = self.parent.analytics_manager.get_popular_orders(10)

        if not popular_orders:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return

        items, counts = zip(*popular_orders)

        plt.figure(figsize=(12, 8))
        bars = plt.barh(items, counts, color='skyblue')
        plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
        plt.title('–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
        plt.gca().invert_yaxis()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, count in zip(bars, counts):
            plt.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height() / 2,
                     f'{count}', ha='left', va='center')

        plt.tight_layout()
        plt.show()

    def show_age_distribution_chart(self):
        """–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º"""
        age_distribution = self.parent.analytics_manager.get_age_distribution()

        if age_distribution.empty:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return

        plt.figure(figsize=(12, 8))
        age_distribution.plot(kind='bar', color='lightcoral')
        plt.xlabel('–í–æ–∑—Ä–∞—Å—Ç')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

    def show_sales_chart(self):
        """–ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        df = self.parent.analytics_manager.load_orders_data()

        if df.empty:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
        df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = df['–î–∞—Ç–∞'].dt.day_name()

        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        days_translation = {
            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
            'Wednesday': '–°—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
            'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
            'Saturday': '–°—É–±–±–æ—Ç–∞',
            'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'].map(days_translation)

        daily_sales = df.groupby('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏')['–°—É–º–º–∞'].sum()
        daily_orders = df.groupby('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏')['–°—É–º–º–∞'].count()

        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))

        # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º
        daily_sales.plot(kind='bar', ax=ax1, color='gold')
        ax1.set_title('–í—ã—Ä—É—á–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
        ax1.set_ylabel('–í—ã—Ä—É—á–∫–∞ (—Ä—É–±)')
        ax1.tick_params(axis='x', rotation=45)

        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º
        daily_orders.plot(kind='bar', ax=ax2, color='lightgreen')
        ax2.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
        ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
        ax2.tick_params(axis='x', rotation=45)

        plt.tight_layout()
        plt.show()

    def load_current_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ø–æ–ª—è"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–∫–∞
            for key, entry in self.receipt_entries.items():
                entry.delete(0, "end")
                entry.insert(0, self.parent.receipt_config['–ß–µ–∫'][key])

            self.qr_entry.delete(0, "end")
            self.qr_entry.insert(0, self.parent.receipt_config['QR']['–°—Å—ã–ª–∫–∞'])

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def save_all_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–∞
            receipt_data = {}
            for key, entry in self.receipt_entries.items():
                receipt_data[key] = entry.get()

            qr_data = {'–°—Å—ã–ª–∫–∞': self.qr_entry.get()}

            self.config_manager.save_receipt_config({
                'receipt': receipt_data,
                'qr': qr_data
            })

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é –≤–∑—Ä–æ—Å–ª–æ–µ
            adult_menu = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
            for pizza, entries in self.menu_adult_entries["–ü–∏—Ü—Ü—ã"].items():
                adult_menu["–ü–∏—Ü—Ü—ã"][pizza] = {
                    "—Ü–µ–Ω–∞": int(entries["—Ü–µ–Ω–∞"].get()),
                    "—Ä–∞–∑–º–µ—Ä": entries["—Ä–∞–∑–º–µ—Ä"].get(),
                    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": entries["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"].get()
                }

            for drink, entries in self.menu_adult_entries["–ù–∞–ø–∏—Ç–∫–∏"].items():
                adult_menu["–ù–∞–ø–∏—Ç–∫–∏"][drink] = {
                    "—Ü–µ–Ω–∞": int(entries["—Ü–µ–Ω–∞"].get()),
                    "–æ–±—ä–µ–º": entries["–æ–±—ä–µ–º"].get()
                }

            self.config_manager.save_menu_config(adult_menu, 'menu_adult.txt')

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–Ω—é –¥–µ—Ç—Å–∫–æ–µ
            minor_menu = {"–ü–∏—Ü—Ü—ã": {}, "–ù–∞–ø–∏—Ç–∫–∏": {}}
            for pizza, entries in self.menu_minor_entries["–ü–∏—Ü—Ü—ã"].items():
                minor_menu["–ü–∏—Ü—Ü—ã"][pizza] = {
                    "—Ü–µ–Ω–∞": int(entries["—Ü–µ–Ω–∞"].get()),
                    "—Ä–∞–∑–º–µ—Ä": entries["—Ä–∞–∑–º–µ—Ä"].get(),
                    "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã": entries["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"].get()
                }

            for drink, entries in self.menu_minor_entries["–ù–∞–ø–∏—Ç–∫–∏"].items():
                minor_menu["–ù–∞–ø–∏—Ç–∫–∏"][drink] = {
                    "—Ü–µ–Ω–∞": int(entries["—Ü–µ–Ω–∞"].get()),
                    "–æ–±—ä–µ–º": entries["–æ–±—ä–µ–º"].get()
                }

            self.config_manager.save_menu_config(minor_menu, 'menu_minor.txt')

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–æ–∫
            toppings_data = {}
            for topping, entry in self.topping_entries.items():
                toppings_data[topping] = int(entry.get())

            self.config_manager.save_toppings(toppings_data)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
            discounts_data = {"–Ω–∞–ø–∏—Ç–∫–∏": {}}
            for volume, entry in self.discount_entries.items():
                try:
                    discount = float(entry.get())
                    discounts_data["–Ω–∞–ø–∏—Ç–∫–∏"][volume] = discount
                except ValueError:
                    discounts_data["–Ω–∞–ø–∏—Ç–∫–∏"][volume] = 0.0

            self.config_manager.save_discounts(discounts_data)

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            self.parent.load_configuration()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            self.destroy()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('config'):
        messagebox.showwarning(
            "–í–Ω–∏–º–∞–Ω–∏–µ",
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ setup.py –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
        )
    else:
        app = PizzaMakerApp()
        app.mainloop()
